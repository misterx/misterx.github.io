{"version":3,"sources":["../../../src/app/AppStore.ts","../../../src/app/AppProvider.tsx","../../../src/data/Collection.ts","../../../src/data/Instance.ts","../../src/storage.ts","../../src/utils.ts","../../../../src/ui/table/DataTableHelpers.tsx","../../../../src/ui/table/DataTable.tsx","../../../../src/ui/form/DataForm.tsx","components/crud/CRUDCreate.tsx","components/crud/CRUDList.tsx","components/crud/CRUDEdit.tsx","components/crud/CRUDResource.tsx","App.tsx","serviceWorker.ts","index.tsx","server.ts","../../src/index.ts"],"names":["AppStore","rest","authenticated","initialized","password","this","login","then","injectAppStore","target","NAME","globalRest","globalAppStore","AppContext","AppProvider","children","Provider","value","appStore","getRest","DataCollectionStoreImpl","resourceName","view","sort","items","status","load","loadingPromise","filter","handleLoadingWithCount","search","collectionOptions","skipCount","handleLoadingNoCount","allWithoutCount","all","catch","clear","count","undefined","delete","e","id","Error","promise","resp","fromRestModel","data","keyField","limit","offset","map","i","item","defaultOpts","loadImmediately","setOptionsAndLoad","dataCollection","opts","collection","entityName","DataInstanceStore","one","loadedEntity","commit","saveMode","Promise","reject","fetchOptions","save","updateResult","resourcePatch","Object","assign","instance","handleTableChange","tableChangeDTO","pagination","sorter","filters","defaultSort","fields","Array","isArray","order","sortOrderPrefix","sortField","field","setSorter","reload","disabled","pageSize","current","setPagination","props","selectedRowKeys","disposers","onChange","onRowSelectionColumnClicked","isRowSelectionEnabled","onRow","record","onClick","onRowClicked","clickedRowKey","constructRowKey","newSelectedRowKeys","slice","rowSelectionMode","clickedRowKeyIndex","indexOf","splice","push","length","onRowSelectionChange","errorContext","displayedRowKeys","displayedSelectedKeys","forEach","selectedKey","message","error","dispose","defaultTableProps","loading","dataSource","paginationConfig","rowKey","columns","generateColumnProps","rowSelection","type","rowSelectionType","canSelectRowByClick","tableProps","className","buttons","showSizeChanger","total","NO_COLUMN_DEF_ERROR","columnDefinitions","source","columnDef","propertyName","generatedColumnProps","config","title","dataIndex","sortable","key","generateDataColumn","defaultProps","hideSelectionColumn","hideClearFilters","formRef","dataInstance","onCancel","submitButtonText","ref","layout","Item","htmlType","reactionDisposer","setFieldsValue","CRUDCreate","observer","handleSubmit","values","create","created","handleCancel","cancel","to","CRUDResource","PATH","onFinish","label","name","setItem","React","observable","CRUDList","users","showDeletionDialog","Modal","confirm","okText","cancelText","onOk","selectedRowKey","handleRowSelectionChange","deleteSelectedRow","getRecordById","align","CREATE_SUBPATH","icon","style","margin","find","CRUDEdit","update","updated","resourceId","match","params","ROUTE","App","componentSize","path","component","from","exact","Boolean","window","location","hostname","Application","localStorage","createServer","models","user","Model","factories","MirageFactory","extend","uuidv4","toString","second","email","namespace","routes","post","token","get","schema","request","queryParams","fieldName","isAscending","startsWith","sortOrderModifier","a","b","valA","valB","sortItems","attrs","put","JSON","parse","requestBody","destroy","seeds","server","createList","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"yhBAKaA,EAAb,WAUI,WAAoBC,GAAiB,oBAAjB,KAAAA,OAHR,KAAAC,eAAgB,EAChB,KAAAC,aAAc,EAR9B,kDAeU,EAAeC,GAAgB,WACjC,OAAOC,KAAKJ,KAAMK,MAAM,EAAOF,GAAUG,KAAK,aAAO,WACjD,EAAKL,eAAgB,QAjBjC,kCAuBOG,KAAKH,eAAiBG,KAAKH,kBAvBlC,KA+BM,SAAUM,EAA0CC,GACtD,OAAO,YAAOT,EAASU,KAAhB,CAAsBD,GA9BtB,EAAAC,KAAO,WAKF,GAAX,K,oCACW,GAAX,K,kCAOD,GADC,K,oBAKA,MAGD,GADC,K,wBAGA,O,iCC7BL,wEAKIC,EACAC,EANJ,yBAOIC,EAAa,gBAAqC,IAWzCC,EAA0C,SAAC,GAKpD,IAHIb,EAGJ,EAHIA,KACAc,EAEJ,EAFIA,SAKJ,OAFAJ,EAAaV,EACbW,EAAiB,IAAI,IAASD,GACvB,gBAACE,EAAWG,SAAQ,CAACC,MAAO,CAAChB,SACzB,gBAAC,IAAQ,CAACiB,SAAUN,GACPG,KAKtB,SAAUI,IACZ,OAAOR,I,+aC0BLS,E,WAcF,WAA4BC,EAChBC,EACAC,GAAa,+BAFG,KAAAF,eAZhB,KAAAG,MAA4B,GAC5B,KAAAC,OAA8B,QAmB1C,KAAAC,KAAO,WAEH,IAAIC,EAgBJ,OAjBA,EAAKF,OAAS,WAIVE,EADA,EAAKC,OACY,EAAKC,uBAAuB,oBAAUC,OAAU,EAAKT,aAAc,EAAKO,OAAQ,EAAKG,qBAE/E,IAAnB,EAAKC,UAEQ,EAAKC,qBAAqB,oBAAUC,gBAAmB,EAAKb,aAAc,EAAKU,oBAE/E,EAAKF,uBAAuB,oBAAUM,IAAO,EAAKd,aAAc,EAAKU,qBAG3EK,OAAM,kBAAM,aAAY,WACnC,EAAKX,OAAS,cAGXE,GAIX,KAAAU,MAAQ,WACJ,EAAKb,MAAQ,GACb,EAAKC,OAAS,QACd,EAAKa,WAAQC,GAIjB,KAAAC,OAAS,SAACC,GACN,GAAS,MAALA,GAAqB,MAARA,EAAEC,GACf,MAAM,IAAIC,MAAM,sCAGpB,OADA,EAAKlB,OAAS,UACP,oBAAWe,OAAO,EAAKnB,aAAcoB,EAAEC,IACzCnC,KAAK,aAAO,WAET,OADA,EAAKmB,QACE,MAEVU,MAAM,aAAO,WAEV,OADA,EAAKX,OAAS,SACP,OA9CfpB,KAAKiB,KAAOA,EACZjB,KAAKkB,KAAOA,E,mEA2DeqB,GAAwC,WACnE,OAAOA,EACFrC,MAAK,SAACsC,GACH,aAAY,WACR,EAAKrB,MAAQsB,EAAiBD,EAAKE,KAAM,EAAKC,UAC9C,EAAKV,MAAQO,EAAKP,MAClB,EAAKb,OAAS,e,2CAKDmB,GAAoC,WAC7D,OAAOA,EACFrC,MAAK,SAACsC,GACH,aAAY,WACR,EAAKrB,MAAQsB,EAAiBD,EAAM,EAAKG,UACzC,EAAKV,WAAQC,EACb,EAAKd,OAAS,e,wCA1B1B,MAAQ,CACJH,KAAMjB,KAAKiB,KACXC,KAAMlB,KAAKkB,KACX0B,MAAO5C,KAAK4C,MACZC,OAAQ7C,KAAK6C,Y,KA4BzB,SAASJ,EAAiBtB,EAA2BwB,GACjD,OAAgB,MAAZA,GAAiC,OAAbA,EACbxB,EAEAA,EAAM2B,KAAI,SAAAC,GACb,IAAMC,EAAOD,EAIb,OAHgB,MAAZJ,IACAK,EAAKL,GAAYK,EAAKX,IAEnBW,KA3GH,GAAX,K,4BACW,GAAX,K,6BACW,GAAX,K,2BACW,GAAX,K,2BACW,GAAX,K,6BACW,GAAX,K,4BACW,GAAX,K,6BACW,GAAX,K,4BACW,GAAX,K,gCACW,GAAX,K,+BAWD,GADC,K,2BAuBD,GADC,K,4BAQD,GADC,K,6BAiFE,IAAMC,EAAqC,CAC9CC,iBAAiB,GAGrB,SAASC,EAAqBC,EAAwCC,GACjD,MAAbA,EAAKpC,OACLmC,EAAenC,KAAOoC,EAAKpC,MAEZ,MAAfoC,EAAK9B,SACL6B,EAAe7B,OAAS8B,EAAK9B,QAEhB,MAAb8B,EAAKnC,OACLkC,EAAelC,KAAOmC,EAAKnC,MAEb,MAAdmC,EAAKT,QACLQ,EAAeR,MAAQS,EAAKT,OAEb,MAAfS,EAAKR,SACLO,EAAeP,OAASQ,EAAKR,QAEZ,MAAjBQ,EAAKV,WACLS,EAAeT,SAAWU,EAAKV,WAEC,qBAAzBU,EAAKH,iBAAmCG,EAAKH,kBACpDE,EAAe/B,OAIhB,IAAMiC,EAAa,SAAeC,GAAyF,IAArEF,EAAqE,uDAAvCJ,EACjFG,EAAiB,IAAIrC,EAA2BwC,GAEtD,OADAJ,EAAkBC,EAAgBC,GAC3BD,I,+aCnNEI,EAAb,WAgBI,WAA4BxC,EAChBC,GAAY,+BADI,KAAAD,eAPhB,KAAAI,OAA8B,QAmB1C,KAAAC,KAAO,SAACgB,GACJ,EAAKW,UAAOd,EACPG,IAGL,EAAKjB,OAAS,UACd,oBAAWqC,IAAO,EAAKzC,aAAcqB,EAAI,CAACpB,KAAM,EAAKA,OAChDf,MAAK,SAACwD,GACH,aAAY,WACR,EAAKV,KAAOU,EACZ,EAAKtC,OAAS,aAGrBW,OAAM,WACH,aAAY,WACR,EAAKX,OAAS,gBAgD9B,KAAAuC,OAAS,SAACC,GACN,GAAiB,MAAb,EAAKZ,KACL,OAAOa,QAAQC,SAEnB,EAAK1C,OAAS,UAEd,IAAM2C,EAA2B,MAAZH,EAAmB,CAACA,SAAUA,QAAY1B,EAE/D,OAAO,oBAAW8B,KAAK,EAAKhD,aAAc,EAAKgC,KAAMe,GAChD7D,MAAK,SAAC+D,GAIH,OAHA,aAAY,WACR,EAAK7C,OAAS,UAEX6C,KAEVlC,OAAM,SAACK,GAEJ,OADA,EAAKhB,OAAS,QACPyC,QAAQC,OAAO1B,OAzF9BpC,KAAKiB,KAAOA,EAnBpB,oDAsDY+B,GACJhD,KAAKgD,KAAOA,EACZhD,KAAKoB,OAAS,SAxDtB,6BAwEW8C,GAEH,OADAC,OAAOC,OAAOpE,KAAKgD,KAAMkB,GAClBlE,KAAK2D,OAAO,YA1E3B,6BA8EWO,GAEH,OADAC,OAAOC,OAAOpE,KAAKgD,KAAMkB,GAClBlE,KAAK2D,OAAO,cAhF3B,KAiIM,SAAUU,EAAuBrD,EAAsBqC,GACzD,IAAMgB,EAAW,IAAIb,EAAqBxC,GAI1C,OAHIqC,GAAqB,MAAbA,EAAKpC,OACboD,EAASpD,KAAOoC,EAAKpC,MAElBoD,EAjIK,GAAX,K,2BAIW,GAAX,K,6BAKW,GAAX,K,2BAcD,GADC,K,2BA2BD,GADC,K,sBAIA,MAeD,GADC,K,qBAIA,MAGD,GADC,K,qBAIA,MAUD,GADC,K,6JCrGL,8BAEY,WAAQ,GA+BpB,OA7BI,sBAAI,qBAAM,C,IAAV,WACI,OAAO,OAAO,KAAK,KAAK,OAAO,Q,gCAG5B,kBAAP,WACQ,KAAC,MAAQ,IAGV,oBAAP,SAAe,GACX,OAAO,KAAK,MAAM,IAMf,gBAAP,SAAW,GACP,MAAM,IAAI,MAAM,0BAGb,uBAAP,SAAkB,UACP,KAAK,MAAM,IAGf,oBAAP,SAAe,EAAa,GACxB,KAAK,MAAM,GAAO,GAK1B,EAjCA,GAAa,oB,4GCAb,2BAAgC,GAC5B,OAAO,OACF,KAAK,GACL,KAAI,SAAC,GACF,OAAO,mBAAmB,GAAO,IAAO,mBAKpD,SAAmB,GACf,GAAgB,MAAZ,EACA,MAAO,GAEX,GAAwB,kBAAb,EACP,OAAO,KAAK,UAAU,GAE1B,OAAO,EAZ4D,CAAU,EAAK,QAE7E,KAAK,O,gWC0DR,SAAUC,EAAqBC,GAAiC,IAE9DC,EAMAD,EANAC,WAEAC,GAIAF,EALAG,QAKAH,EAJAE,QACAE,EAGAJ,EAHAI,YAEAvB,GACAmB,EAFAK,OAEAL,EADAnB,gBAOJ,OA9BE,SAAuBqB,EAA6CE,EAAiCvB,GAKvG,GAJGyB,MAAMC,QAAQL,KACbA,EAASA,EAAO,IAGhBA,GAAUA,EAAOM,MAAO,CACxB,IAAMC,EAA4C,YAAjBP,EAAOM,MAAuB,IAAM,IAEjEE,EAAYR,EAAOS,MAEvB9B,EAAelC,KAAO8D,EAAkBC,OAExC7B,EAAelC,KAAOyD,EAe1BQ,CAAUV,EAAQE,EAAavB,GAM7B,SAA2BoB,EAAmCpB,GAA+D,IAAvBgC,EAAuB,wDAExHC,EAA+Bb,EAA/Ba,SAAUC,EAAqBd,EAArBc,SAAUC,EAAWf,EAAXe,QAE3B,IAAiB,IAAbF,EAKA,OAJAjC,EAAeR,WAAQV,EACvBkB,EAAeP,YAASX,EACxBkB,EAAezB,WAAY,OACvByD,GAAQhC,EAAe/B,QAK3B+B,EAAezB,YACfyB,EAAezB,WAAY,GAG3B2D,GAAYC,IACZnC,EAAeR,MAAQ0C,EACvBlC,EAAeP,OAASyC,GAAYC,EAAU,IAG9CH,GAAQhC,EAAe/B,OA3B3BmE,CAAchB,EAAYpB,GAEnBA,EAAe/B,O,8UCCb,EAAS,EAAtB,kDAiBI,WAAYoE,GAAwB,2BAChC,cAAMA,IAZEC,gBAA+B,GAE3C,EAAAC,UAAiC,GAuDjC,EAAAC,SAAW,SAACpB,EAAmCE,EAA8BD,GAAqD,qBAG7HH,EAAqB,CACjBE,aAAYE,UAASD,SAAQE,YAJ4F,EACvHA,YAGwCC,OAJ+E,EAC1GA,OAGmCxB,eAF9B,EAAKqC,MAAvBrC,kBA6CX,EAAAyC,4BAA8B,SAACH,GACvB,EAAKI,wBACL,EAAKJ,gBAAkBA,IAI/B,EAAAK,MAAQ,SAACC,GACL,MAAO,CACHC,QAAS,kBAAM,EAAKC,aAAaF,MAKzC,EAAAE,aAAe,SAACF,GACZ,GAAI,EAAKF,sBAAuB,CAC5B,IAAMK,EAAgB,EAAKC,gBAAgBJ,GAEvCK,EAAqB,EAAKX,gBAAgBY,QAE9C,OAAQ,EAAKb,MAAMc,kBACf,IAAK,QACD,IAAMC,EAAqB,EAAKd,gBAAgBe,QAAQN,GACpDK,GAAsB,EAEtBH,EAAmBK,OAAOF,EAAoB,GAG9CH,EAAmBM,KAAKR,GAE5B,MACJ,IAAK,SACG,EAAKT,gBAAgBkB,OAAS,GAAK,EAAKlB,gBAAgB,KAAOS,EAE/DE,EAAqB,GAGrBA,EAAmB,GAAKF,EAKpC,EAAKT,gBAAkBW,IAI/B,EAAAQ,qBAAuB,WACnB,OAAQ,EAAKpB,MAAMc,kBACf,UAAKrE,EACD,MAAM,IAAII,MAAJ,UAAa,EAAKwE,aAAlB,mDAAyE,EAAKrB,MAAMc,iBAApF,mBACV,IAAK,OACD,OACJ,IAAK,QACL,IAAK,SACG,EAAKd,MAAMoB,sBACX,EAAKpB,MAAMoB,qBAAqB,EAAKnB,iBAEzC,MACJ,QACI,IAAIpD,MAAM,EAAKwE,aAAc,qBAAsB,EAAKrB,MAAMc,oBAvJtC,IAGzBrF,EAAQ,EAAKuE,MAAMrC,eAAnBlC,KAHyB,OAOhC,EAAKyD,YAAczD,EAPa,EAjBxC,gEA4KqB,WAIblB,KAAK2F,UAAUgB,KAAK,aAChB,kBAAM,EAAKlB,MAAMrC,kBACjB,SAAAA,GACI,GAAI,EAAK0C,uBAAyB,EAAKJ,gBAAgBkB,OAAS,GAA+B,SAA1BxD,EAAehC,OAAmB,CAEnG,IACM2F,EADQ3D,EAAejC,MACE2B,KAAI,SAAAE,GAAI,OAAI,EAAKoD,gBAAgBpD,MAE1DgE,EAAqC,GAE3C,EAAKtB,gBAAgBuB,SAAQ,SAACC,GACtBH,EAAiBN,QAAQS,IAAgB,GACzCF,EAAsBL,KAAKO,MAInC,EAAKxB,gBAAkBsB,OAMnChH,KAAK2F,UAAUgB,KAAK,aAChB,kBAAM,EAAKlB,MAAMrC,eAAehC,UAChC,SAACA,GACkB,UAAXA,GACA+F,EAAA,EAAQC,MAAM,EAAKN,aAAe,sBAM9C9G,KAAK2F,UAAUgB,KAAK,aAChB,kBAAM,EAAKjB,kBACX1F,KAAK6G,uBAIT7G,KAAK2F,UAAUgB,KAAK,aAChB,kBAAM,EAAKlB,MAAMc,oBACjB,WACI,EAAKb,gBAAkB,SAzNvC,6CA+NQ1F,KAAK2F,UAAUsB,SAAQ,SAACI,GAAD,OAAgCA,SA/N/D,+BAkOU,aACwBrH,KAAKyF,MAAMrC,eAGjCkE,EAAmC,CACnCC,QAAoB,YALtB,EACMnG,OAKJoG,WANF,EACcrG,MAMZqD,WAAYxE,KAAKyH,iBACjBC,OAAQ,SAAA1B,GAAM,OAAI,EAAKI,gBAAgBJ,IACvC2B,QAAS3H,KAAK4H,oBACdhC,SAAS5F,KAAK4F,UAGd5F,KAAK8F,wBACLwB,EAAoB,OAAH,wBACVA,GAAiB,CACpBO,aAAc,CACVC,KAAM9H,KAAK+H,iBACXrC,gBAAiB1F,KAAK0F,gBACtBE,SAAU5F,KAAK6F,+BAInB7F,KAAKyF,MAAMuC,sBACXV,EAAoB,OAAH,wBACVA,GAAiB,CACpBvB,MAAO/F,KAAK+F,UAMxB,IAAMkC,EAAa,OAAH,wBAAQX,GAAsBtH,KAAKyF,MAAMwC,YAEzD,OAAM,uBAAKC,UAAU,qBACjB,uBAAKA,UAAU,WACVlI,KAAKyF,MAAM0C,SAEhB,gBAAC,IAAK,iBAAKF,OAxQvB,sCA8QoBjC,GACZ,OAAOA,EAAO3D,KA/QtB,mCA4BQ,sCAAgCrC,KAAKyF,MAAMrC,eAAepC,aAA1D,OA5BR,uCAgCQ,OAAQhB,KAAKyF,MAAMc,kBACf,IAAK,QACD,MAAO,WACX,IAAK,SACD,MAAO,QACX,QACI,MAAM,IAAIjE,MAAJ,UAAatC,KAAK8G,aAAlB,mDAAyE9G,KAAKyF,MAAMc,iBAApF,sBAtCtB,uCA4CQ,MAAO,CACH6B,iBAAiB,EACjBC,MAAOrI,KAAKyF,MAAMrC,eAAenB,SA9C7C,6BAkDwB,IAET2C,EAAU5E,KAAKyF,MAAfb,OAEP,GAAc,MAAVA,EACA,OAAOA,EAGX,MAAM,IAAItC,MAAJ,UAAatC,KAAK8G,aAAlB,YAAkC,EAAUwB,wBA1D1D,0CAwE2B,aACiCtI,KAAKyF,MAAlD8C,EADY,EACZA,kBAAmB3D,EADP,EACOA,OAAQxB,EADf,EACeA,eAE5BoF,EAASD,GAAwC3D,EACvD,IAAK4D,EACD,MAAM,IAAIlG,MAAJ,UAAatC,KAAK8G,aAAlB,YAAkC,EAAUwB,sBAGtD,OAAOE,EACF1F,KAAI,SAAC2F,GACF,IAAMC,EAAeD,EAErB,GAAoB,MAAhBC,EAAsB,CAGtB,IAAMC,EDvDpB,SAAyCC,GAAwB,IAE/DF,EAEAE,EAFAF,aAaJ,MARkD,CAC9CG,MAAOH,EACPI,UAAUJ,EACVjE,OANAmE,EADAG,SAQAC,IAAKN,GC4CoCO,CAAsB,CAC/CjI,aAAcoC,EAAepC,aAC7B0H,eACAK,UAAU,IAGd,wBACOJ,GAIX,MAAM,IAAIrG,MAAJ,UAAa,EAAKwE,aAAlB,2DAlGtB,4CAuGQ,IAAK9G,KAAKyF,MAAMc,iBACZ,MAAM,IAAIjE,MAAJ,UAAatC,KAAK8G,aAAlB,8DAEV,MAAO,CAAC,SAAU,SAASL,QAAQzG,KAAKyF,MAAMc,mBAAqB,MA1G3E,GAAkC,aAEd,EAAA+B,oBAAsB,8DAQ/B,EAAAY,aAAe,CAClB3C,iBAAkB,SAClByB,qBAAqB,EACrBmB,qBAAqB,EACrBC,kBAAkB,GARV,GAAX,K,sCAqCD,GADC,K,+BAMA,MAES,GAAT,K,qBASA,MAID,GADC,K,+BAUD,GADC,K,kCA6BA,MAUD,GADC,K,kDAOD,GADC,K,4BAQD,GADC,K,mCA1HQ,EAAS,KADrB,KACY,G,4VC9DA,EAAb,iG,2BAEIC,QAAU,cAFd,uDAMU,MACiDrJ,KAAKyF,MAAjD6D,EADL,EACKA,aAAcC,EADnB,EACmBA,SAAUC,EAD7B,EAC6BA,iBACxBpI,EAAUkI,EAAVlI,OAEP,OAAO,gBAAC,IAAI,eAACqI,IAAKzJ,KAAKqJ,QAASK,OAAO,WAAWxB,UAAW,iBAAqBlI,KAAKyF,OAClFzF,KAAKyF,MAAM/E,SACZ,gBAAC,IAAKiJ,KAAI,CAACzB,UAAW,WAClB,gBAAC,IAAM,CACHJ,KAAK,UACL8B,SAAS,SACTvE,SAAqB,SAAXjE,GAAgC,UAAXA,EAC/BmG,QAAoB,YAAXnG,GAERoI,GAEL,gBAAC,IAAM,CAACI,SAAS,SACT3D,QAASsD,GAAQ,cAtBzC,0CA8BqB,WAGbvJ,KAAK6J,iBAAmB,aACpB,WACI,OAAO,EAAKpE,MAAM6D,aAAatG,QAEnC,WACO,EAAKyC,MAAM6D,aAAatG,MACvB,EAAKqG,QAAQ9D,QAASuE,eAAe,EAAKrE,MAAM6D,aAAatG,WAvCjF,6CA6CQhD,KAAK6J,uBA7Cb,GAA8B,aAAjB,EAAQ,GADpB,KACY,GCPN,I,cAAME,EADZC,aACD,8MAEIV,aAAejF,mBAAS,QAF5B,qFAMI4F,aAAe,SAACC,GACZ,EAAKZ,aAAaa,OAAOD,GAAQhK,MAAK,SAACkC,GACnC,EAAKgI,SAAU,MAR3B,EAYIC,aAAe,WACX,EAAKC,QAAS,GAbtB,uDAiBQ,OAAItK,KAAKoK,SAAWpK,KAAKsK,OACd,gBAAC,IAAD,CAAUC,GAAIC,EAAaC,OAE/B,gBAAC,EAAD,CAAUf,OAAQ,WAAYF,iBAAkB,OAAQkB,SAAU1K,KAAKiK,aAAcX,aAActJ,KAAKsJ,aAAcC,SAAUvJ,KAAKqK,cACxI,gBAAC,IAAKV,KAAN,CAAWgB,MAAM,OAAOC,KAAK,QAAO,gBAAC,IAAD,OACpC,gBAAC,IAAKjB,KAAN,CAAWgB,MAAM,SAASC,KAAK,UAAS,gBAAC,IAAD,OACxC,gBAAC,IAAKjB,KAAN,CAAWgB,MAAM,QAAQC,KAAK,SAAQ,gBAAC,IAAD,UAvBlD,0CA4BQ5K,KAAKsJ,aAAauB,QAAQ,QA5BlC,GAAgCC,aAAhC,qCAGKC,KAHL,yEAG0B,KAH1B,oCAIKA,KAJL,yEAIyB,KAJzB,S,qCCEaC,EADZhB,aACD,gQAEIiB,MAAQ3H,qBAAgB,QAF5B,EAII4H,mBAAqB,SAAC9I,GAClB+I,IAAMC,QAAQ,CACVvC,MAAM,mCAAD,OAAqCzG,EAAEwI,KAAvC,KACLS,OAAQ,SACRC,WAAY,SACZC,KAAM,WAEF,OADA,EAAKC,oBAAiBtJ,EACf,EAAK+I,MAAM9I,OAAOC,OAXzC,EAuDIqJ,yBAA2B,SAAC/F,GACxB,EAAK8F,eAAiB9F,EAAgB,IAxD9C,EA2DIgG,kBAAoB,WAChB,EAAKR,mBAAmB,EAAKS,cAAc,EAAKH,kBA5DxD,uDAkBQ,OAAO,gBAAC,EAAD,CAAWpI,eAAgBpD,KAAKiL,MAAOrG,OAAQ,CAAC,OAAO,SAAS,SACrDiC,qBAAsB7G,KAAKyL,yBAC3BtD,QACI,gBAAC,IAAD,CAAOyD,MAAO,YACV,gBAAC,IAAD,CACIrB,GAAIC,EAAaC,KAAO,IAAMD,EAAaqB,eAC3C7C,IAAI,UACJ,gBAAC,IAAD,CAAQlB,KAAK,UAAUgE,KAAM,gBAAC,eAAD,OAA7B,WAEJ,gBAAC,IAAD,CACIvB,GAAIC,EAAaC,KAAO,IAAMzK,KAAKwL,eACnCxC,IAAI,QACJ,gBAAC,IAAD,CAAQ3D,UAAWrF,KAAKwL,eAAgB1D,KAAK,WAA7C,SAEJ,gBAAC,IAAD,CACIiE,MAAO,CAACC,OAAQ,iBAChB3G,UAAWrF,KAAKwL,eAChBvF,QAASjG,KAAK0L,kBACd1C,IAAI,SACJlB,KAAK,WALT,eAhClC,oCA4CkBzF,GACV,IAAM2D,EACFhG,KAAKiL,MAAM9J,MAAM8K,MAAK,SAAAjG,GAAM,OAAIA,EAAO3D,KAAOA,KAElD,IAAK2D,EACD,MAAM,IAAI1D,MAAM,8BAAgCD,GAGpD,OAAO2D,MApDf,GAA8B8E,aAA9B,4CACKC,KADL,uECEamB,EADZlC,aACD,8MAEIV,aAAejF,mBAAS,QAF5B,qFAMI4F,aAAe,SAACC,GACZ,EAAKZ,aAAa6C,OAAOjC,GAAQhK,MAAK,SAACkC,GACnC,EAAKgK,SAAU,MAR3B,EAYI/B,aAAe,WACX,EAAKC,QAAS,GAbtB,uDAiBQ,OAAItK,KAAKoM,SAAWpM,KAAKsK,OACd,gBAAC,IAAD,CAAUC,GAAIC,EAAaC,OAE/B,gBAAC,EAAD,CAAUf,OAAQ,WAAYF,iBAAkB,OAAQkB,SAAU1K,KAAKiK,aAAcX,aAActJ,KAAKsJ,aAAcC,SAAUvJ,KAAKqK,cACxI,gBAAC,IAAKV,KAAN,CAAWgB,MAAM,OAAOC,KAAK,QAAO,gBAAC,IAAD,OACpC,gBAAC,IAAKjB,KAAN,CAAWgB,MAAM,SAASC,KAAK,UAAS,gBAAC,IAAD,OACxC,gBAAC,IAAKjB,KAAN,CAAWgB,MAAM,QAAQC,KAAK,SAAQ,gBAAC,IAAD,UAvBlD,0CA4BQ5K,KAAKsJ,aAAajI,KAAKrB,KAAKyF,MAAM4G,gBA5B1C,GAA8BvB,aAA9B,qCAGKC,KAHL,yEAG0B,KAH1B,oCAIKA,KAJL,yEAIyB,KAJzB,S,UCLaP,EAAb,uKAMc,IACC6B,EAAcrM,KAAKyF,MAAM6G,MAAMC,OAA/BF,WACP,OACI,gBAAC,IAAD,CAAMxD,MAAO,kBAERwD,EAEOA,GAAY7B,EAAaqB,eACpB,gBAAC,EAAD,MACA,gBAAC,EAAD,CAAUQ,WAAYA,IAC7B,gBAAC,EAAD,WAhBtB,GAAkCvB,aAArBN,EAEFC,KAAO,QAFLD,EAGFqB,eAAiB,SAHfrB,EAIFgC,MAAQhC,EAAaC,KAAO,gB,YCgBxBgC,EArBHtM,yBAAe6J,aAAkC,YAAgB,EAAdnJ,SAE7D,OAEM,uBAAKqH,UAAU,OAKX,gBAAC,IAAD,CAAgBwE,cAAe,SAC3B,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAOC,KAAMnC,EAAagC,MAAOI,UAAWpC,IAC5C,gBAAC,IAAD,CAAUqC,KAAK,IAAItC,GAAG,QAAQuC,OAAO,WCRrCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASZ,MACvB,2D,0CCPC,IAAM1M,GAAO,IAAIuN,cAAY,QAAS,KAAMH,OAAOI,cCN/CC,YAAa,CAEhBC,OAAO,CACHC,KAAMC,KAEVC,UAAW,CACPF,KAAMG,IAAcC,OAAO,CACvBtL,GADuB,WAEnB,OAAOuL,eAASC,YAEpBjD,KAJuB,SAIlB7H,GACD,MAAM,QAAN,OAAeA,IAEnB+K,OAPuB,SAOhB/K,GACH,MAAM,UAAN,OAAiBA,IAErBgL,MAVuB,SAUjBhL,GACF,MAAM,SAAN,OAAgBA,OAK5BiL,UAAW,MACXC,OAvBgB,WAwBZjO,KAAKkO,KAAK,UAAS,iBAAK,CAACC,MAAM,iBAC/BnO,KAAKoO,IAAI,SAAQ,SAAUC,EAAYC,GACnC,IAAM1L,EAAQ0L,EAAQC,YAAY3L,OAAO0L,EAAQC,YAAY3L,MAAM,GAC7DC,EAASyL,EAAQC,YAAY1L,QAAQyL,EAAQC,YAAY1L,OAAO,EAClEH,EAsEpB,SAAmBvB,EAAiBD,GAEhC,IACIsN,EADAC,GAAuB,EAE3B,IAAGvN,EAMC,OAAOC,EALHD,EAAKwN,WAAW,OAChBD,GAAc,GAElBD,EAAYtN,EAAKoF,MAAM,GAI3B,IAAMqI,EAAoBF,EAAc,GAAK,EAE7C,OAAOtN,EAAMD,MAAK,SAAC0N,EAAQC,GACvB,IAAIC,EAAOF,EAAEJ,GACTO,EAAOF,EAAEL,GAEb,OAAIM,IAASC,EACF,EAGC,MAARD,GAAwB,MAARC,EAET,EAAIJ,EAGH,MAARI,EACY,MAARD,GAEQ,EAAIH,EAGT,EAGPG,EAAOC,GACC,EAAIJ,EACLG,EAAOC,EACP,EAAIJ,EAEJ,KA/GQK,CAAUX,EAAOpD,MAAMnJ,MAAMwL,OAAOgB,EAAQC,YAAYrN,MAEnE,MAAO,CACHwB,KAAMA,EAAK4D,MAAMzD,EAAOA,EAAOD,GAC/BX,MAAOS,EAAKkE,WAGpB5G,KAAKoO,IAAI,aAAY,SAACC,EAAYC,GAC9B,OAAOD,EAAOpD,MAAMgB,KAAKqC,EAAQ/B,OAAOlK,IAAI4M,SAGhDjP,KAAKkP,IAAI,aAAY,SAACb,EAAYC,GAC9B,IAAIW,EAAQE,KAAKC,MAAMd,EAAQe,aAE/B,OADAhB,EAAOpD,MAAMgB,KAAKqC,EAAQ/B,OAAOlK,IAAI8J,OAAO8C,GACrC,MAGXjP,KAAKkO,KAAK,UAAS,SAACG,EAAYC,GAC5B,IAAIW,EAAQE,KAAKC,MAAMd,EAAQe,aAG/B,OADAhB,EAAOpD,MAAMd,OAAb,2BAAwB8E,GAAxB,IAA+B5M,GAAGuL,eAASC,cACpC,MAGX7N,KAAKmC,OAAO,aAAY,SAACkM,EAAYC,GAEjC,OADAD,EAAOpD,MAAMgB,KAAKqC,EAAQ/B,OAAOlK,IAAIiN,UAC9B,OAGfC,MAzDgB,SAyDVC,GACFA,EAAOC,WAAW,OAAO,ODlDrCC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,cAAD,CAAahQ,KAAMA,IACf,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOgN,UAAWH,OAI9BoD,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/P,MAAK,SAAAgQ,GACJA,EAAaC,gBAEdpO,OAAM,SAAAqF,GACLgJ,QAAQhJ,MAAMA,EAAMD,a,8nBGjJ5B,cACA,UAGA,aAqBA,iBAMI,WACW,EACA,EACC,QAFD,wBACA,qBACC,cAAuB,kBAFxB,cACA,qBACC,eALJ,0BAA0C,GAsJtD,OA7II,sBAAI,wBAAS,C,IAAb,WACI,OAAO,KAAK,QAAQ,QAAQ,EAAY,yB,IAG5C,SAAc,GACV,KAAK,QAAQ,QAAQ,EAAY,uBAAwB,I,gCAGtD,kBAAP,SAAa,EAAkB,GAA/B,WACU,EAAuB,CACzB,OAAQ,OACR,KAAM,KAAK,UAAU,CACjB,SAAQ,EACR,SAAQ,KAIhB,OAAO,MAAM,KAAK,OAAS,SAAU,GAChC,KAAK,EAAY,aACjB,MAAK,YAAK,mBACV,MAAK,SAAC,GAEH,OADA,EAAK,UAAY,EAAK,MACf,MAIZ,gBAAP,SAAc,EAAsB,EAA4B,GAC5D,OAAO,KAAK,MAAM,MAAO,EAAc,EAAS,IAG7C,4BAAP,SAA0B,EAAsB,EAA4B,GACxE,OAAO,KAAK,MAAM,MAAO,EAAc,EAAS,IAG7C,mBAAP,SACI,EACA,EACA,EACA,GAEA,IAAM,EAAI,OAAO,GAAO,CAAE,OAAQ,IAClC,OAAO,KAAK,MAAM,MAAO,EAAc,EAAK,IAGzC,gBAAP,SACI,EACA,EACA,EACA,GAEA,IAAM,EAAO,GAAW,EAAQ,KAAO,EAAQ,KAAK,IAAK,GACzD,OAAO,KAAK,MAAM,MAAO,EAAe,IAAM,EAAO,EAAI,KAAM,IAG5D,mBAAP,SAAc,EAAsB,EAAI,GACpC,OAAO,KAAK,MAAM,SAAU,EAAe,IAAM,EAAI,KAAM,IAGxD,iBAAP,SACI,EACA,EACA,GAEO,OAAwB,OAAZ,QAAY,IAAZ,IAAgB,IAApB,SACf,MAAiB,WAAb,GAAsC,MAAZ,GAAmC,MAAf,EAAS,GAChD,KAAK,MAAM,MAAO,EAAe,IAAM,EAAS,GAAI,KAAK,UAAU,GAAW,GAE9E,KAAK,MAAM,OAAQ,EAAe,IAAK,KAAK,UAAU,GAAW,IAKzE,mBAAP,SACI,EACA,EACA,EACA,EACA,GAEA,IAAM,EAA6B,MAAV,EAAiB,KAAK,UAAU,GAAU,KAC7D,EAAe,GAAyB,MAAb,EAAS,GAAW,EAAS,GAAG,IAAI,GACrE,OAAO,KAAK,MAAM,OAAQ,EAAe,EAAc,EAAa,IAAK,EAAkB,IAGxF,mBAAP,WAEI,OADA,KAAK,gBACE,QAAQ,WAGZ,kBAAP,SAAgB,EAAgB,EAAc,EAAY,GAA1D,WACQ,EAAM,KAAK,OAAS,EAClB,EAAQ,GACV,OAAM,EACN,QAAS,CACL,kBAAmB,KAAK,gBAEzB,GAcP,OAXI,KAAK,YACL,EAAS,QAAT,cAAoC,UAAY,KAAK,WAE1C,SAAX,GAAgC,QAAX,IACrB,EAAS,KAAO,EAChB,EAAS,QAAQ,gBAAkB,mCAExB,QAAX,GAAoB,GAAQ,OAAO,KAAK,GAAM,OAAS,IACvD,GAAO,IAAM,kBAAgB,IAG1B,MAAM,EAAK,GACb,KAAK,EAAY,aACjB,OAAM,SAAC,GACA,EAAY,uBAAuB,EAAM,YACzC,EAAK,gBACL,EAAK,qBAAqB,SAAQ,SAAC,GAAM,kBAGhD,MAAK,YAAK,oBAGJ,yBAAf,SAAsC,GAClC,OAAO,GAAwB,MAAhB,EAAK,QAGhB,0BAAR,WACI,KAAK,QAAQ,WAAW,EAAY,yBAGzB,cAAf,SAA2B,GACvB,OAAI,EAAS,QAAU,KAAO,EAAS,OAAS,IACrC,EAEA,QAAQ,OAAO,CAAC,QAAS,EAAS,WAAY,SAAQ,KAI9D,0BAAP,SAAqB,GAArB,WAEI,OADA,KAAK,qBAAqB,KAAK,GACxB,WAAM,SAAK,qBAAqB,OAAO,EAAK,qBAAqB,QAAQ,GAAnE,KAtJF,yBAAyB,YAwJ5C,EA1JA,GAAa,iB,6FAzBb,8R","file":"static/js/main.2d839f2e.chunk.js","sourcesContent":["import {observable,action} from \"mobx\";\nimport {Application} from \"@tpg-ui/rest\";\nimport {IReactComponent} from \"mobx-react/dist/types/IReactComponent\";\nimport {inject, IWrappedComponent} from \"mobx-react\";\n\nexport class AppStore {\n\n    static NAME = 'appStore';\n\n    /**\n     * Whether the user authenticated.\n     */\n    @observable authenticated = false;\n    @observable initialized = false;\n\n    constructor(private rest: Application) {\n\n    }\n\n    @action\n    login(login: string, password: string) {\n        return this.rest!.login(login, password).then(action(() => {\n            this.authenticated = true;\n        }));\n    }\n\n    @action\n    testLogin() {\n       this.authenticated = !this.authenticated;\n    }\n}\n\nexport interface StoreInjected {\n    appStore?: AppStore;\n}\n\nexport function injectAppStore<T extends IReactComponent>(target: T): T & IWrappedComponent<T> {\n    return inject(AppStore.NAME)(target);\n}","import * as React from \"react\";\nimport {AppStore} from \"./AppStore\";\nimport {Application} from \"@tpg-ui/rest\";\nimport {Provider} from \"mobx-react\";\n\nlet globalRest: Application;\nlet globalAppStore: AppStore;\nlet AppContext = React.createContext<AppContextValue>({});\n\nexport interface AppContextValue {\n    rest?: Application;\n}\n\nexport interface AppProviderProps {\n    rest: Application;\n    children: React.ReactNode | React.ReactNode[] | null;\n}\n\nexport const AppProvider: React.FC<AppProviderProps> = (\n    {\n        rest,\n        children,\n    }\n) => {\n    globalRest = rest;\n    globalAppStore = new AppStore(globalRest);\n    return <AppContext.Provider value={{rest}}>\n               <Provider appStore={globalAppStore}>\n                           {children}\n               </Provider>\n            </AppContext.Provider>\n};\n\nexport function getRest():Application {\n    return globalRest;\n}","import {DataContainer, DataContainerStatus} from \"./DataContainer\";\nimport {CollectionOptions, CollectionWithCount, Criteria, Resource} from \"@tpg-ui/rest\";\nimport { observable, action, runInAction } from \"mobx\";\nimport {getRest} from \"..\";\nimport {WithId} from \"../model\";\n\nexport interface DataCollectionStore<T> extends DataContainer {\n    /**\n     * Retrieved entity instances. MobX observable.\n     */\n    items: Array<Resource<T>>;\n    /**\n     * Name of a view used to limit the entity graph. MobX observable.\n     */\n    view?: string;\n    /**\n     * Sort order. Property name opionally preceeded by `+` or `-` character.\n     * If the name is preceeded by `+`, or there is no preceeding character, then the sort order is ascending.\n     * If the name is preceeded by `-`, then the sort order is descending.\n     */\n    sort?: string;\n    /**\n     * An object describing the filtering criteria.\n     * MobX observable.\n     */\n    filter?: Criteria;\n    /**\n     * Maximum number of entities to retrieve.\n     * MobX observable.\n     */\n    limit?: number;\n    /**\n     * Position of the first entity to retrieve. Useful if you want to skip first N entities\n     * (for example, in a pagination scenario).\n     * MobX observable.\n     */\n    offset?: number;\n    /**\n     * Total number of entities available in the source.\n     * MobX observable.\n     */\n    count?: number;\n\n    skipCount?:boolean;\n\n    indexName?: string;\n\n    keyField?: string;\n\n    load: () => Promise<void>;\n\n    clear: () => void;\n    /**\n     * Deletes an entity instance from the source.\n     * @param e - entity instance to be deleted.\n     * @returns promise that resolves when deletion is complete.\n     */\n    delete: (e: T & {id?:string}) => Promise<any>;\n}\n\nclass DataCollectionStoreImpl<T> implements DataCollectionStore<T> {\n\n    @observable items: Array<Resource<T>> = [];\n    @observable status: DataContainerStatus = \"CLEAN\";\n    @observable view?: string;\n    @observable sort?: string;\n    @observable filter?: Criteria;\n    @observable limit?: number;\n    @observable offset?: number;\n    @observable count?: number;\n    @observable skipCount?: boolean;\n    @observable keyField?: string;\n\n\n    constructor(public readonly resourceName: string,\n                view?: string,\n                sort?: string) {\n        this.view = view;\n        this.sort = sort;\n    }\n\n    @action\n    load = (): Promise<void> => {\n        this.status = \"LOADING\";\n        let loadingPromise;\n\n        if (this.filter) {\n            loadingPromise = this.handleLoadingWithCount(getRest().search<T>(this.resourceName, this.filter, this.collectionOptions));\n        }\n        else if(this.skipCount === true)\n        {\n            loadingPromise = this.handleLoadingNoCount(getRest().allWithoutCount<T>(this.resourceName, this.collectionOptions));\n        }else{\n            loadingPromise = this.handleLoadingWithCount(getRest().all<T>(this.resourceName, this.collectionOptions));\n        }\n\n        loadingPromise.catch(() => runInAction(() => {\n            this.status = 'ERROR';\n        }));\n\n        return loadingPromise;\n    };\n\n    @action\n    clear = () => {\n        this.items = [];\n        this.status = 'CLEAN';\n        this.count = undefined;\n    };\n\n    @action\n    delete = (e: T & WithId): Promise<any> => {\n        if (e == null || e.id == null) {\n            throw new Error('Unable to delete entity without ID');\n        }\n        this.status = 'LOADING';\n        return getRest()!.delete(this.resourceName, e.id)\n            .then(action(() => {\n                this.load();\n                return true;\n            }))\n            .catch(action(() => {\n                this.status = \"ERROR\";\n                return true;\n            }));\n    };\n\n    private get collectionOptions():CollectionOptions {\n        return  {\n            view: this.view,\n            sort: this.sort,\n            limit: this.limit,\n            offset: this.offset\n        };\n\n    }\n\n    private handleLoadingWithCount(promise: Promise<CollectionWithCount<T>>) {\n        return promise\n            .then((resp) => {\n                runInAction(() => {\n                    this.items = fromRestModel<T>(resp.data, this.keyField);\n                    this.count = resp.count;\n                    this.status = 'DONE';\n                })\n            })\n    }\n\n    private handleLoadingNoCount(promise: Promise<Array<Resource<T>>>) {\n        return promise\n            .then((resp) => {\n                runInAction(() => {\n                    this.items = fromRestModel<T>(resp, this.keyField);\n                    this.count = undefined;\n                    this.status = 'DONE';\n                })\n            })\n    }\n}\n\nfunction fromRestModel<T>(items: Array<Resource<T>>, keyField?: string): Array<Resource<T>> {\n    if (keyField == null || keyField === 'id') {\n        return items;\n    } else {\n        return items.map(i => {\n            const item = i as any;\n            if (keyField != null) {\n                item[keyField] = item.id;\n            }\n            return item;\n        });\n    }\n}\n\nexport interface DataCollectionOptions {\n\n    loadImmediately?: boolean,\n\n    view?: string,\n\n    sort?: string,\n\n    limit?: number,\n\n    offset?: number,\n\n    filter?: Criteria,\n\n    keyField?: string,\n\n}\nexport const defaultOpts: DataCollectionOptions = {\n    loadImmediately: true\n};\n\nfunction setOptionsAndLoad<E>(dataCollection: DataCollectionStore<E>, opts: DataCollectionOptions) {\n    if (opts.view != null) {\n        dataCollection.view = opts.view;\n    }\n    if (opts.filter != null) {\n        dataCollection.filter = opts.filter;\n    }\n    if (opts.sort != null) {\n        dataCollection.sort = opts.sort;\n    }\n    if (opts.limit != null) {\n        dataCollection.limit = opts.limit;\n    }\n    if (opts.offset != null) {\n        dataCollection.offset = opts.offset;\n    }\n    if (opts.keyField != null) {\n        dataCollection.keyField = opts.keyField;\n    }\n    if (typeof opts.loadImmediately === 'undefined' || opts.loadImmediately) {\n        dataCollection.load();\n    }\n}\n\nexport const collection = <E extends {}>(entityName: string, opts: DataCollectionOptions = defaultOpts): DataCollectionStore<E> => {\n    const dataCollection = new DataCollectionStoreImpl<E>(entityName);\n    setOptionsAndLoad(dataCollection, opts);\n    return dataCollection;\n};","/**\n * Retrieves an entity instance using Generic REST API.\n *\n * @typeparam T - entity type.\n */\nimport {DataContainer, DataContainerStatus} from \"./DataContainer\";\nimport {action, observable, runInAction} from \"mobx\";\nimport {getRest} from \"..\";\nimport {Resource, SaveMode} from \"@tpg-ui/rest\";\nimport {WithId} from \"../model\";\n\nexport class DataInstanceStore<T> implements DataContainer {\n\n    /**\n     * Retrieved entity instance.\n     */\n    @observable item?: T & Partial<Resource<T>> & WithId;\n    /**\n     * @inheritDoc\n     */\n    @observable status: DataContainerStatus = \"CLEAN\";\n\n    /**\n     * Name of the view used to limit the entity graph.\n     */\n    @observable view?: string;\n\n    constructor(public readonly resourceName: string,\n                view?:string,\n                ) {\n        this.view = view;\n    }\n\n    /**\n     * Retrieves an entity instance using the given id and view by sending a request to the REST API.\n     *\n     * @param id - id of an entity instance to be retrieved.\n     */\n    @action\n    load = (id: string) => {\n        this.item = undefined;\n        if (!id) {\n            return;\n        }\n        this.status = \"LOADING\";\n        getRest()!.one<T>(this.resourceName, id, {view: this.view})\n            .then((loadedEntity) => {\n                runInAction(() => {\n                    this.item = loadedEntity;\n                    this.status = \"DONE\"\n                })\n            })\n            .catch(() => {\n                runInAction(() => {\n                    this.status = \"ERROR\";\n                })\n            })\n    };\n\n    /**\n     * Sets the {@link item} to the provided value. Changes {@link status} to `DONE`.\n     *\n     * @param item - entity instance to be set as the {@link item}.\n     */\n    @action\n    setItem(item: this[\"item\"]) {\n        this.item = item;\n        this.status = \"DONE\";\n    }\n\n    /**\n     * Updates the {@link item} using a provided `entityPatch`, then sends a request to the REST API to persist the changes.\n     *\n     * @param resourcePatch - a `Partial` representing the changes to be made.\n     * Different REST API endpoints and HTTP methods will be used depending on whether the entity is new.\n     * IMPORTANT:\n     * If this parameter is omitted, then the entity will be considered new if it lacks the `id` attribute.\n     * This will produce incorrect results for String ID entities.\n     * Therefore using this parameter is mandatory for String ID entities.\n     *\n     * @returns a promise that resolves to the update result returned by the REST API.\n     */\n    @action\n    create(resourcePatch: Partial<T>): Promise<any> {\n        Object.assign(this.item, resourcePatch);\n        return this.commit(\"create\");\n    }\n\n    @action\n    update(resourcePatch: Partial<T>): Promise<any> {\n        Object.assign(this.item, resourcePatch);\n        return this.commit(\"update\");\n    }\n\n    /**\n     * Sends a request to the REST API to persist the changes made to the {@link item}.\n     *\n     * @param saveMode - see {@link update}\n     *\n     * @returns a promise that resolves to the update result returned by the REST API.\n     */\n    @action\n    commit = (saveMode?: SaveMode): Promise<Partial<T>> => {\n        if (this.item == null) {\n            return Promise.reject();\n        }\n        this.status = 'LOADING';\n\n        const fetchOptions = saveMode != null ? {saveMode: saveMode} : undefined;\n\n        return getRest()!.save(this.resourceName, this.item, fetchOptions)\n            .then((updateResult) => {\n                runInAction(() => {\n                    this.status = 'DONE';\n                });\n                return updateResult;\n            })\n            .catch((e) => {\n                this.status = 'ERROR';\n                return Promise.reject(e);\n            })\n    };\n}\n\nexport interface DataInstanceOptions {\n     /**\n     * See {@link DataInstanceStore.view}\n     */\n    view?: string;\n\n}\n\n/**\n * Initialization function that instantiates a {@link DataInstanceStore}.\n *\n * @typeparam T - entity type.\n *\n * @param resourceName - name of the entity to be retrieved.\n * @param opts - {@link DataInstanceStore} configuration.\n */\nexport function instance<T extends {}>(resourceName: string, opts?: DataInstanceOptions):DataInstanceStore<T> {\n    const instance = new DataInstanceStore<T>(resourceName);\n    if (opts && opts.view != null) {\n        instance.view = opts.view;\n    }\n    return instance;\n}","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DefaultStorage = void 0;\r\nvar DefaultStorage = /** @class */ (function () {\r\n    function DefaultStorage() {\r\n        this.items = {};\r\n    }\r\n    Object.defineProperty(DefaultStorage.prototype, \"length\", {\r\n        get: function () {\r\n            return Object.keys(this.items).length;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DefaultStorage.prototype.clear = function () {\r\n        this.items = {};\r\n    };\r\n    DefaultStorage.prototype.getItem = function (key) {\r\n        return this.items[key];\r\n    };\r\n    /**\r\n     * @deprecated operation not supported\r\n     */\r\n    DefaultStorage.prototype.key = function (index) {\r\n        throw new Error('Unsupported operation');\r\n    };\r\n    DefaultStorage.prototype.removeItem = function (key) {\r\n        delete this.items[key];\r\n    };\r\n    DefaultStorage.prototype.setItem = function (key, data) {\r\n        this.items[key] = data;\r\n    };\r\n    return DefaultStorage;\r\n}());\r\nexports.DefaultStorage = DefaultStorage;\r\n//# sourceMappingURL=storage.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.encodeGetParams = void 0;\r\nfunction encodeGetParams(data) {\r\n    return Object\r\n        .keys(data)\r\n        .map(function (key) {\r\n        return encodeURIComponent(key) + \"=\" + (encodeURIComponent(serialize(data[key])));\r\n    })\r\n        .join(\"&\");\r\n}\r\nexports.encodeGetParams = encodeGetParams;\r\nfunction serialize(rawParam) {\r\n    if (rawParam == null) {\r\n        return '';\r\n    }\r\n    if (typeof rawParam === 'object') {\r\n        return JSON.stringify(rawParam);\r\n    }\r\n    return rawParam;\r\n}\r\n//# sourceMappingURL=utils.js.map","/**\n * @typeparam E - entity type\n */\nimport {TablePaginationConfig} from \"antd/es/table\";\nimport {SorterResult} from \"antd/es/table/interface\";\nimport {DataCollectionStore} from \"@tpg-ui/core\";\nimport { ColumnProps } from \"antd/lib/table\";\n\nexport interface TableChangeDTO<E> {\n    /**\n     * Received in antd {@link https://3x.ant.design/components/table | Table}'s `onChange` callback\n     */\n    pagination: TablePaginationConfig,\n    /**\n     * Received in antd {@link https://3x.ant.design/components/table | Table}'s `onChange` callback\n     */\n    filters: Record<string, string[]>,\n    /**\n     * Received in antd {@link https://3x.ant.design/components/table | Table}'s `onChange` callback\n     */\n    sorter:  SorterResult<E>| SorterResult<E>[],\n    /**\n     * Default sort order.\n     * Property name opionally preceeded by `+` or `-` character.\n     * If the name is preceeded by `+`, or there is no preceeding character, then the sort order is ascending.\n     * If the name is preceeded by `-`, then the sort order is descending.\n     */\n    defaultSort: string | undefined,\n    /**\n     * Names of the entity properties that should be displayed.\n     */\n    fields: string[],\n\n    dataCollection: DataCollectionStore<E>,\n}\n\n\nexport function setFilters<E>(\n    // @ts-ignore\n    tableFilters: Record<string, string[]>,\n    // @ts-ignore\n    fields: string[],\n    // @ts-ignore\n    dataCollection: DataCollectionStore<E>,\n){\n\n}\n\nexport function setSorter<E>(sorter:  SorterResult<E>| SorterResult<E>[], defaultSort: string | undefined, dataCollection: DataCollectionStore<E>) {\n    if(Array.isArray(sorter)){\n        sorter = sorter[0];\n    }\n\n    if (sorter && sorter.order) {\n        const sortOrderPrefix: string = (sorter.order === 'descend') ? '-' : '+';\n\n        let sortField = sorter.field;\n\n        dataCollection.sort = sortOrderPrefix + sortField;\n    } else {\n        dataCollection.sort = defaultSort;\n    }\n}\n\nexport function handleTableChange<E>(tableChangeDTO: TableChangeDTO<E>): Promise<void> {\n    const {\n        pagination,\n        filters,\n        sorter,\n        defaultSort,\n        fields,\n        dataCollection\n    } = tableChangeDTO;\n\n    setFilters(filters, fields, dataCollection);\n    setSorter(sorter, defaultSort, dataCollection);\n    setPagination(pagination, dataCollection);\n\n    return dataCollection.load();\n}\n\nexport function setPagination<E>(pagination: TablePaginationConfig, dataCollection: DataCollectionStore<E>, reload: boolean = false) {\n\n    const {disabled, pageSize, current} = pagination;\n\n    if (disabled === true) {\n        dataCollection.limit = undefined;\n        dataCollection.offset = undefined;\n        dataCollection.skipCount = true;\n        if (reload) dataCollection.load();\n        return;\n    }\n\n    // need to sync enabled pagination config and dataCollection - reset limit and offset\n    if (dataCollection.skipCount) {\n        dataCollection.skipCount = false;\n    }\n\n    if (pageSize && current) {\n        dataCollection.limit = pageSize;\n        dataCollection.offset = pageSize * (current - 1);\n    }\n\n    if (reload) dataCollection.load();\n}\nexport interface DataColumnConfig {\n    propertyName: string,\n    resourceName: string,\n    sortable: boolean,\n}\n\nexport function generateDataColumn<EntityType>(config: DataColumnConfig): ColumnProps<EntityType> {\n    const {\n        propertyName,\n        sortable\n    } = config;\n\n\n    let defaultColumnProps: ColumnProps<EntityType> = {\n        title: propertyName,\n        dataIndex:propertyName,\n        sorter: sortable,\n        key: propertyName,\n        //render: (text, record) => DataTableCell<EntityType>({propertyInfo, text, mainStore, record})\n    };\n\n    return defaultColumnProps;\n}","import * as React from \"react\";\nimport {Table,message} from \"antd\";\nimport {DataCollectionStore, WithId} from \"@tpg-ui/core\";\nimport {ColumnProps, TablePaginationConfig, TableProps} from \"antd/es/table\";\nimport { observer } from \"mobx-react\";\nimport { computed, action, observable, IReactionDisposer, reaction } from \"mobx\";\nimport {RowSelectionType, SorterResult} from \"antd/es/table/interface\";\nimport {generateDataColumn, handleTableChange} from \"./DataTableHelpers\";\n\n/**\n * @typeparam E - entity type.\n */\nexport interface DataTableProps<E> {\n    dataCollection: DataCollectionStore<E>,\n    /**\n     * @deprecated use `columnDefinitions` instead. If used together, `columnDefinitions` will take precedence.\n     */\n    fields?: string[],\n    /**\n     * Names of columns that should have filters enabled.\n     * Default: filters will be enabled on all columns. Pass empty array to disable all filters.\n     */\n    enableFiltersOnColumns?: string[],\n    /**\n     * By default, when any number of filters is active, a `Clear filters` control will be displayed above the\n     * table. When clicked, this control disables all filters at once.\n     * If `hideClearFilters` is `true`, then the `Clear filters` control won't be displayed.\n     * Default: `false`\n     */\n    hideClearFilters?: boolean,\n    /**\n     * A callback that takes the ids of the selected rows.\n     * Can be used together with {@link buttons} to facilitate CRUD operations or other functionality.\n     *\n     * @param selectedRowKeys - entity ids corresponding to the selected rows.\n     */\n    onRowSelectionChange?: (selectedRowKeys: React.Key[]) => void,\n    /**\n     * `single` allows to select one row at a time.\n     * `multi` allows to select multiple rows.\n     * `none` disables row selection.\n     * Default: `single`.\n     */\n    rowSelectionMode?: 'single' | 'multi' | 'none',\n    /**\n     * When `true`, hides the {@link https://3x.ant.design/components/table | selection column}.\n     * Default: `false`.\n     */\n    hideSelectionColumn?: boolean;\n    /**\n     * When `true`, a row can be selected by clicking on it.\n     * When `false`, a row can only be selected using\n     * the {@link https://3x.ant.design/components/table | selection column}.\n     * Default: `true`.\n     */\n    canSelectRowByClick?: boolean,\n    /**\n     * Controls that will be rendered above the table.\n     */\n    buttons?: JSX.Element,\n    /**\n     * Can be used to override any of the underlying\n     * {@link https://3x.ant.design/components/table/#Table | Table properties}.\n     */\n    tableProps?: TableProps<E & {}>,\n\n    /**\n     * Describes the columns to be displayed. An element of this array can be\n     * a property name (which will render a column displaying that property;\n     * the column will have the default look&feel)\n     * or a {@link ColumnDefinition} object (which allows creating a custom column).\n     *\n     * NOTE: you need to use either {@link columnDefinitions} or {@link fields} (deprecated)\n     * for the `DataTable` to work.\n     */\n    columnDefinitions?: Array<string>\n}\n\n@observer\nexport class DataTable<E> extends React.Component<DataTableProps<E>>{\n\n    static readonly NO_COLUMN_DEF_ERROR = 'You need to provide either columnDefinitions or fields prop';\n\n    defaultSort: string | undefined;\n\n    @observable selectedRowKeys: React.Key[] = [];\n\n    disposers: IReactionDisposer[] = [];\n\n    static defaultProps = {\n        rowSelectionMode: 'single' as 'single' | 'multi' | 'none',\n        canSelectRowByClick: true,\n        hideSelectionColumn: false,\n        hideClearFilters: false,\n    };\n\n    constructor(props: DataTableProps<E>) {\n        super(props);\n\n        const {sort} = this.props.dataCollection;\n        // if (filter) {\n        //     this.tableFilters = entityFilterToTableFilters(filter, this.fields);\n        // }\n        this.defaultSort = sort;\n    }\n\n    get errorContext(): string {\n        return `[DataTable, resource: ${this.props.dataCollection.resourceName}]`;\n    }\n\n    get rowSelectionType(): RowSelectionType {\n        switch (this.props.rowSelectionMode) {\n            case 'multi':\n                return 'checkbox';\n            case 'single':\n                return 'radio';\n            default:\n                throw new Error(`${this.errorContext} rowSelectionMode is not expected to be ${this.props.rowSelectionMode} at this point`);\n        }\n    }\n\n    @computed\n    get paginationConfig(): TablePaginationConfig {\n        return {\n            showSizeChanger: false,\n            total: this.props.dataCollection.count,\n        };\n    }\n\n    @computed get fields(): string[] {\n\n        const {fields} = this.props;\n\n        if (fields != null) {\n            return fields;\n        }\n\n        throw new Error(`${this.errorContext} ${DataTable.NO_COLUMN_DEF_ERROR}`);\n    }\n\n\n    @action\n    onChange = (pagination: TablePaginationConfig, filters: Record<string, any>, sorter: SorterResult<E>| SorterResult<E>[] ): void => {\n        const {defaultSort, fields} = this;\n        const {dataCollection} = this.props;\n         handleTableChange<E>({\n             pagination, filters, sorter, defaultSort, fields, dataCollection\n         });\n    };\n\n    @computed\n    get generateColumnProps(): Array<ColumnProps<E>> {\n        const {columnDefinitions, fields, dataCollection} = this.props;\n\n        const source = columnDefinitions ? columnDefinitions : fields;\n        if (!source) {\n            throw new Error(`${this.errorContext} ${DataTable.NO_COLUMN_DEF_ERROR}`);\n        }\n\n        return source\n            .map((columnDef: string) => {\n                const propertyName = columnDef;\n\n                if (propertyName != null) {\n                    // Column is bound to an entity property\n\n                    const generatedColumnProps = generateDataColumn<E>({\n                        resourceName: dataCollection.resourceName,\n                        propertyName,\n                        sortable: true,\n                    });\n\n                    return {\n                        ...generatedColumnProps,\n                    };\n                }\n\n                throw new Error(`${this.errorContext} Neither field name nor columnProps were provided`);\n            });\n    };\n\n    get isRowSelectionEnabled(): boolean {\n        if (!this.props.rowSelectionMode) {\n            throw new Error(`${this.errorContext} rowSelectionMode is expected to be defined at this point`);\n        }\n        return ['single', 'multi'].indexOf(this.props.rowSelectionMode) > -1;\n    }\n\n    @action\n    onRowSelectionColumnClicked = (selectedRowKeys: React.Key[]): void => {\n        if (this.isRowSelectionEnabled) {\n            this.selectedRowKeys = selectedRowKeys;\n        }\n    };\n    @action\n    onRow = (record: E) => {\n        return {\n            onClick: () => this.onRowClicked(record)\n        }\n    };\n\n    @action\n    onRowClicked = (record: E): void => {\n        if (this.isRowSelectionEnabled) {\n            const clickedRowKey = this.constructRowKey(record);\n\n            let newSelectedRowKeys = this.selectedRowKeys.slice();\n\n            switch (this.props.rowSelectionMode) {\n                case 'multi':\n                    const clickedRowKeyIndex = this.selectedRowKeys.indexOf(clickedRowKey);\n                    if (clickedRowKeyIndex > -1) {\n                        // Deselect row in 'multi' mode\n                        newSelectedRowKeys.splice(clickedRowKeyIndex, 1);\n                    } else {\n                        // Select row in 'multi' mode\n                        newSelectedRowKeys.push(clickedRowKey);\n                    }\n                    break;\n                case 'single':\n                    if (this.selectedRowKeys.length > 0 && this.selectedRowKeys[0] === clickedRowKey) {\n                        // Deselect row in 'single' mode\n                        newSelectedRowKeys = [];\n                    } else {\n                        // Select row in 'single' mode\n                        newSelectedRowKeys[0] = clickedRowKey;\n                    }\n                    break;\n            }\n\n            this.selectedRowKeys = newSelectedRowKeys;\n        }\n    };\n\n    onRowSelectionChange = () => {\n        switch (this.props.rowSelectionMode) {\n            case undefined:\n                throw new Error(`${this.errorContext} rowSelectionMode is not expected to be ${this.props.rowSelectionMode} at this point`);\n            case 'none':\n                return;\n            case 'multi':\n            case 'single':\n                if (this.props.onRowSelectionChange) {\n                    this.props.onRowSelectionChange(this.selectedRowKeys);\n                }\n                break;\n            default:\n                new Error(this.errorContext+ ' rowSelectionMode:'+ this.props.rowSelectionMode);\n        }\n    };\n\n    componentDidMount(): void {\n\n        // When dataCollection.items has changed (e.g. due to sorting, filtering or pagination change) some of the selected rows\n        // may not be displayed anymore and shall be removed from selectedRowKeys\n        this.disposers.push(reaction(\n            () => this.props.dataCollection,\n            dataCollection => {\n                if (this.isRowSelectionEnabled && this.selectedRowKeys.length > 0 && dataCollection.status === 'DONE') {\n\n                    const items = dataCollection.items;\n                    const displayedRowKeys = items.map(item => this.constructRowKey(item) as React.Key);\n\n                    const displayedSelectedKeys: React.Key[] = [];\n\n                    this.selectedRowKeys.forEach((selectedKey: React.Key) => {\n                        if (displayedRowKeys.indexOf(selectedKey) > -1) {\n                            displayedSelectedKeys.push(selectedKey);\n                        }\n                    });\n\n                    this.selectedRowKeys = displayedSelectedKeys;\n                }\n            }\n        ));\n\n        // Display error message if dataCollection.load has failed\n        this.disposers.push(reaction(\n            () => this.props.dataCollection.status,\n            (status) => {\n                if (status === 'ERROR') {\n                    message.error(this.errorContext + \"Loading failed\");\n                }\n            }\n        ));\n\n        // Call corresponding callback(s) when selectedRowKeys is changed\n        this.disposers.push(reaction(\n            () => this.selectedRowKeys,\n            this.onRowSelectionChange\n        ));\n\n        // Clear row selection when rowSelectionMode is changed\n        this.disposers.push(reaction(\n            () => this.props.rowSelectionMode,\n            () => {\n                this.selectedRowKeys = [];\n            }\n        ))\n    }\n\n    componentWillUnmount(): void {\n        this.disposers.forEach((dispose: IReactionDisposer) => dispose());\n    }\n\n    render() {\n        const { status, items } = this.props.dataCollection;\n\n\n        let defaultTableProps: TableProps<E> = {\n            loading: status === 'LOADING',\n            dataSource: items,\n            pagination: this.paginationConfig,\n            rowKey: record => this.constructRowKey(record),\n            columns: this.generateColumnProps,\n            onChange:this.onChange\n        };\n\n        if (this.isRowSelectionEnabled) {\n            defaultTableProps = {\n                ...defaultTableProps,\n                rowSelection: {\n                    type: this.rowSelectionType,\n                    selectedRowKeys: this.selectedRowKeys,\n                    onChange: this.onRowSelectionColumnClicked,\n                },\n            };\n\n            if (this.props.canSelectRowByClick) {\n                defaultTableProps = {\n                    ...defaultTableProps,\n                    onRow: this.onRow,\n                };\n            }\n        }\n\n\n        const tableProps = { ...defaultTableProps, ...this.props.tableProps };\n\n        return<div className='tpg-ui-data-table'>\n            <div className='buttons'>\n                {this.props.buttons}\n            </div>\n            <Table {...tableProps}>\n\n            </Table>\n        </div>\n    }\n\n    constructRowKey(record: E & WithId): string {\n        return record.id!;\n    }\n}","import * as React from \"react\";\nimport {Button, Form} from \"antd\";\nimport { observer } from \"mobx-react\";\nimport {FormInstance, FormProps} from \"antd/es/form\";\nimport { IReactionDisposer, reaction } from \"mobx\";\nimport {DataInstanceStore} from \"@tpg-ui/core\";\n\nexport interface DataFormProps {\n    onCancel: () => void;\n    dataInstance: DataInstanceStore<any>,\n    /**\n     * This prop can be used to override the default caption on Submit button\n     */\n    submitButtonText?: string;\n}\n\n@observer\nexport class DataForm extends React.Component<DataFormProps & FormProps, any>{\n\n    formRef = React.createRef<FormInstance>();\n\n    reactionDisposer: IReactionDisposer;\n\n    render() {\n        const {dataInstance, onCancel, submitButtonText} = this.props;\n        const {status} = dataInstance;\n\n        return <Form ref={this.formRef} layout=\"vertical\" className={'resource-form'} {...this.props}>\n            {this.props.children}\n            <Form.Item className={'actions'}>\n                <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    disabled={status !== \"DONE\" && status !== \"ERROR\"}\n                    loading={status === \"LOADING\"}\n                >\n                    {submitButtonText}\n                </Button>\n                <Button htmlType=\"button\"\n                        onClick={onCancel}\n                >\n                    Cancel\n                </Button>\n\n            </Form.Item>\n        </Form>\n    }\n    componentDidMount() {\n\n\n        this.reactionDisposer = reaction(\n            () => {\n                return this.props.dataInstance.item\n            },\n            () => {\n                if(this.props.dataInstance.item) {\n                    this.formRef.current!.setFieldsValue(this.props.dataInstance.item);\n                }\n            }\n        )\n    }\n    componentWillUnmount() {\n        this.reactionDisposer();\n    }\n}","import * as React from \"react\";\nimport {instance} from \"@tpg-ui/core\";\nimport {Form, Input} from \"antd\";\nimport { observer } from \"mobx-react\";\nimport {observable } from \"mobx\";\nimport {Redirect} from \"react-router-dom\";\nimport {CRUDResource} from \"./CRUDResource\";\nimport {DataForm} from \"@tpg-ui/ui\";\n\n@observer\nexport class CRUDCreate extends React.Component{\n\n    dataInstance = instance('user');\n    @observable created = false;\n    @observable cancel = false;\n\n    handleSubmit = (values:any) => {\n        this.dataInstance.create(values).then((e)=>{\n            this.created = true;\n        });\n    };\n\n    handleCancel = () => {\n        this.cancel = true;\n    };\n\n    render() {\n        if (this.created || this.cancel) {\n            return <Redirect to={CRUDResource.PATH}/>\n        }\n        return <DataForm layout={\"vertical\"} submitButtonText={\"Save\"} onFinish={this.handleSubmit} dataInstance={this.dataInstance} onCancel={this.handleCancel}>\n            <Form.Item label=\"Name\" name=\"name\"><Input/></Form.Item>\n            <Form.Item label=\"Second\" name=\"second\"><Input/></Form.Item>\n            <Form.Item label=\"Email\" name=\"email\"><Input/></Form.Item>\n        </DataForm>\n    }\n\n    componentDidMount() {\n        this.dataInstance.setItem({});\n    }\n}\n","import * as React from \"react\";\nimport {DataTable} from \"@tpg-ui/ui\";\nimport {collection, WithId} from \"@tpg-ui/core\";\nimport {observer} from \"mobx-react\";\nimport {Button, Modal, Space} from \"antd\";\nimport {CRUDResource} from \"./CRUDResource\";\nimport {Link} from \"react-router-dom\";\nimport {PlusOutlined} from \"@ant-design/icons/lib\";\nimport {observable} from \"mobx\";\nimport {Resource} from \"@tpg-ui/rest\";\n\n@observer\nexport class CRUDList extends React.Component {\n    @observable selectedRowKey: string | undefined;\n    users = collection<any>('user');\n\n    showDeletionDialog = (e: Resource<any>) => {\n        Modal.confirm({\n            title: `Are you sure you want to delete ${e.name}?`,\n            okText: 'Delete',\n            cancelText: 'Cancel',\n            onOk: () => {\n                this.selectedRowKey = undefined;\n                return this.users.delete(e);\n            }\n        });\n    };\n\n\n    render() {\n        return <DataTable dataCollection={this.users} fields={['name','second','email']}\n                          onRowSelectionChange={this.handleRowSelectionChange}\n                          buttons={\n                              <Space align={\"baseline\"}>\n                                  <Link\n                                      to={CRUDResource.PATH + '/' + CRUDResource.CREATE_SUBPATH}\n                                      key='create'>\n                                      <Button type='primary' icon={<PlusOutlined/>}>Create</Button>\n                                  </Link>\n                                  <Link\n                                      to={CRUDResource.PATH + '/' + this.selectedRowKey}\n                                      key='edit'>\n                                      <Button disabled={!this.selectedRowKey} type='default'>Edit</Button>\n                                  </Link>\n                                  <Button\n                                      style={{margin: '0 12px 12px 0'}}\n                                      disabled={!this.selectedRowKey}\n                                      onClick={this.deleteSelectedRow}\n                                      key='remove'\n                                      type='default'>\n                                      Remove\n                                  </Button>\n                              </Space>\n                          }/>\n    }\n\n    getRecordById(id: string): Resource<any> {\n        const record: Resource<any> | undefined =\n            this.users.items.find(record => record.id === id);\n\n        if (!record) {\n            throw new Error('Cannot find entity with id ' + id);\n        }\n\n        return record;\n    }\n\n    handleRowSelectionChange = (selectedRowKeys: React.Key[]) => {\n        this.selectedRowKey = selectedRowKeys[0] as string;\n    };\n\n    deleteSelectedRow = () => {\n        this.showDeletionDialog(this.getRecordById(this.selectedRowKey!));\n    };\n}","import * as React from \"react\";\nimport {instance} from \"@tpg-ui/core\";\nimport {Button, Form, Input} from \"antd\";\nimport {FormInstance} from \"antd/es/form\";\nimport { observer } from \"mobx-react\";\nimport { IReactionDisposer, reaction, observable } from \"mobx\";\nimport {Link, Redirect} from \"react-router-dom\";\nimport {CRUDResource} from \"./CRUDResource\";\nimport {DataForm} from \"@tpg-ui/ui\";\n\ninterface Props {\n    resourceId:string;\n}\n@observer\nexport class CRUDEdit extends React.Component<Props>{\n\n    dataInstance = instance('user');\n    @observable updated = false;\n    @observable cancel = false;\n\n    handleSubmit = (values:any) => {\n        this.dataInstance.update(values).then((e)=>{\n            this.updated = true;\n        });\n    };\n\n    handleCancel = () => {\n        this.cancel = true;\n    };\n\n    render() {\n        if (this.updated || this.cancel) {\n            return <Redirect to={CRUDResource.PATH}/>\n        }\n        return <DataForm layout={\"vertical\"} submitButtonText={\"Save\"} onFinish={this.handleSubmit} dataInstance={this.dataInstance} onCancel={this.handleCancel}>\n            <Form.Item label=\"Name\" name=\"name\"><Input/></Form.Item>\n            <Form.Item label=\"Second\" name=\"second\"><Input/></Form.Item>\n            <Form.Item label=\"Email\" name=\"email\"><Input/></Form.Item>\n        </DataForm>\n    }\n\n    componentDidMount() {\n        this.dataInstance.load(this.props.resourceId);\n    }\n}\n","import * as React from \"react\";\nimport {CRUDCreate} from \"./CRUDCreate\";\nimport {CRUDList} from \"./CRUDList\";\nimport {CRUDEdit} from \"./CRUDEdit\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport {Card} from \"antd\";\n\ntype Props = RouteComponentProps<{resourceId?: string}>;\n\nexport class CRUDResource extends React.Component<Props>{\n\n    static PATH = '/crud';\n    static CREATE_SUBPATH = 'create';\n    static ROUTE = CRUDResource.PATH + '/:resourceId?';\n\n    render() {\n        const {resourceId} = this.props.match.params;\n        return (\n            <Card title={\"Some crud test\"}>\n\n                {resourceId\n                    ? (\n                        resourceId==CRUDResource.CREATE_SUBPATH\n                            ?<CRUDCreate/>\n                            :<CRUDEdit resourceId={resourceId}/>)\n                    : <CRUDList/>}\n            </Card>\n        )\n    }\n}","import * as React from 'react';\nimport {observer} from \"mobx-react\";\nimport {injectAppStore, StoreInjected} from \"@tpg-ui/core\";\nimport {Switch, Route, Redirect } from 'react-router-dom';\nimport {CRUDResource} from \"./components/crud/CRUDResource\";\nimport {ConfigProvider} from \"antd\";\n\n\nconst App = injectAppStore(observer<React.FC<StoreInjected>>(({appStore}) => {\n    const store = appStore!;\n  return (\n\n        <div className=\"App\">\n            {/*<div>*/}\n            {/*    <div>Authenticated: {JSON.stringify(store.authenticated)}</div>*/}\n            {/*    <button onClick={()=>{store.login('asd','asd')}}>Login</button>*/}\n            {/*</div>*/}\n            <ConfigProvider componentSize={\"small\"} >\n                <Switch>\n                    <Route path={CRUDResource.ROUTE} component={CRUDResource}/>\n                    <Redirect from=\"/\" to=\"/crud\" exact={true} />\n                </Switch>\n            </ConfigProvider>\n        </div>\n  );\n}));\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are created in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the created precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Application} from \"@tpg-ui/rest\";\nimport {AppProvider} from \"@tpg-ui/core\";\nimport {jsonServer} from \"./server\";\nimport {BrowserRouter, HashRouter, Route} from \"react-router-dom\";\n\nexport const rest = new Application('/api/', 'en', window.localStorage );\njsonServer();\nReactDOM.render(\n  <React.StrictMode>\n      <AppProvider rest={rest}>\n          <HashRouter>\n              <Route component={App}/>\n          </HashRouter>\n      </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {createServer, Model, Factory as MirageFactory, RestSerializer  } from 'miragejs';\nimport {v4 as uuidv4} from \"uuid\"\n\nexport function jsonServer() {\n\n    return createServer({\n\n        models:{\n            user: Model\n        },\n        factories: {\n            user: MirageFactory.extend({\n                id(){\n                    return uuidv4().toString();\n                },\n                name(i:number) {\n                    return `User ${i}`\n                },\n                second(i:number) {\n                    return `Second ${i}`\n                },\n                email(i:number) {\n                    return `email ${i}`\n                },\n            }),\n\n        },\n        namespace: 'api',\n        routes() {\n            this.post('/login',()=>({token:'test_token'}));\n            this.get('/user',function (schema:any, request) {\n                const limit = request.queryParams.limit?+request.queryParams.limit:10;\n                const offset = request.queryParams.offset?+request.queryParams.offset:0;\n                let data = sortItems(schema.users.all().models,request.queryParams.sort);\n\n                return {\n                    data: data.slice(offset,offset+limit),\n                    count: data.length\n                };\n            });\n            this.get('/user/:id',(schema:any, request) => {\n                return schema.users.find(request.params.id).attrs;\n            });\n\n            this.put('/user/:id',(schema:any, request) => {\n                let attrs = JSON.parse(request.requestBody);\n                schema.users.find(request.params.id).update(attrs);\n                return {};\n            });\n\n            this.post('/user/',(schema:any, request) => {\n                let attrs = JSON.parse(request.requestBody);\n\n                schema.users.create({...attrs, id:uuidv4().toString()})\n                return {};\n            });\n\n            this.delete('/user/:id',(schema:any, request) => {\n                schema.users.find(request.params.id).destroy();\n                return {};\n            });\n        },\n        seeds(server) {\n            server.createList(\"user\",38);\n        },\n    })\n}\n\n\n\nclass UUIDIdentityManager{\n    private ids:Set<any>;\n    constructor() {\n        this.ids = new Set()\n    }\n\n    // Returns a new unused unique identifier.\n    fetch() {\n        let uuid = uuidv4()\n        while (this.ids.has(uuid)) {\n            uuid = uuidv4()\n        }\n\n        this.ids.add(uuid)\n\n        return uuid\n    }\n\n    // Registers an identifier as used. Must throw if identifier is already used.\n    set(id:any) {\n        if (this.ids.has(id)) {\n            throw new Error(`ID ${id} has already been used.`)\n        }\n\n        this.ids.add(id)\n    }\n\n    // Resets all used identifiers to unused.\n    reset() {\n        this.ids.clear()\n    }\n}\n\nfunction sortItems(items:Array<any>,sort?:string):Array<any>\n{\n    let isAscending: boolean = true;\n    let fieldName: string;\n    if(sort){\n        if (sort.startsWith('-')) {\n            isAscending = false;\n        }\n        fieldName = sort.slice(1);\n    }else {\n        return items;\n    }\n    const sortOrderModifier = isAscending ? 1 : -1;\n\n    return items.sort((a: any, b: any) => {\n        let valA = a[fieldName];\n        let valB = b[fieldName];\n\n        if (valA === valB) {\n            return 0;\n        }\n\n        if (valA == null && valB != null) {\n            // valA is null or undefined, but not valB -> valA is \"greater\" than valB\n            return 1 * sortOrderModifier;\n        }\n\n        if (valB == null) {\n            if (valA != null) {\n                // valB is null or undefined, but not valA -> valB is \"greater\" than valA\n                return -1 * sortOrderModifier;\n            }\n            // One is null and the other is undefined\n            return 0;\n        }\n\n        if (valA < valB) {\n            return -1 * sortOrderModifier;\n        } else if (valA > valB) {\n            return 1 * sortOrderModifier;\n        } else {\n            return 0;\n        }\n    });\n\n\n\n}","export * from './app/AppStore';\nexport * from './app/AppProvider';\nexport * from './data/Collection';\nexport * from './data/Instance';\nexport * from './model';"],"sourceRoot":""}