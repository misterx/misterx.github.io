{"version":3,"sources":["../../../src/app/AppProvider.tsx","../../../src/data/Collection.ts","../../../src/data/Instance.ts","../../src/storage.ts","../../src/utils.ts","../../src/Msg.tsx","../../../src/util/metadata.ts","../../src/index.ts","../../../../src/ui/table/DataTableHelpers.tsx","../../../../src/ui/table/DataTableColumn.ts","../../../../src/ui/table/DataTable.tsx","../../../../src/ui/form/ResourceSelectField.tsx","../../../../src/ui/form/DataFormField.tsx","../../../../src/ui/form/DataForm.tsx","../../../src/ui/Login.tsx","components/user/Create.tsx","components/user/Edit.tsx","components/user/List.tsx","components/user/Controller.tsx","components/post/Create.tsx","components/post/Edit.tsx","components/post/List.tsx","components/post/Controller.tsx","Centered.tsx","App.tsx","serviceWorker.ts","server.ts","index.tsx","../../../src/app/AppStore.ts"],"names":["globalRest","globalAppStore","AppContext","AppProvider","rest","children","metadata","initialize","Provider","value","appStore","getRest","DataCollectionStoreImpl","resourceName","view","sort","items","status","load","loadingPromise","filter","handleLoadingWithCount","search","collectionOptions","relatedOptions","related","skipCount","handleLoadingNoCount","allWithoutCount","all","catch","clear","count","undefined","delete","e","id","Error","then","this","criteria","promise","resp","fromRestModel","data","keyField","valueField","limit","offset","map","i","item","_resourceName","defaultOpts","loadImmediately","setOptionsAndLoad","dataCollection","opts","collection","entityName","relatedCollection","fromResource","fromResourceId","fromRelation","fromResourceRelation","DataInstanceStore","one","loadedEntity","resourcePatch","Object","assign","Promise","reject","create","updateResult","update","instance","Msg","propertyName","messages","message","getPropertyInfo","metaClass","find","mci","name","properties","prop","handleTableChange","tableChangeDTO","pagination","sorter","filters","defaultSort","fields","Array","isArray","order","sortOrderPrefix","sortField","field","setSorter","reload","disabled","pageSize","current","setPagination","columnDefToPropertyName","columnDef","props","selectedRowKeys","disposers","onChange","onRowSelectionColumnClicked","isRowSelectionEnabled","onRow","record","onClick","onRowClicked","clickedRowKey","constructRowKey","newSelectedRowKeys","slice","rowSelectionMode","clickedRowKeyIndex","indexOf","splice","push","length","onRowSelectionChange","errorContext","error","forEach","dispose","defaultTableProps","loading","dataSource","paginationConfig","rowKey","columns","generateColumnProps","rowSelection","type","rowSelectionType","canSelectRowByClick","tableProps","className","buttons","showSizeChanger","total","columnDefinitions","reduce","accumulatedFields","columnDefinition","fieldsFromColumnDefs","NO_COLUMN_DEF_ERROR","columnSettings","columnProps","generatedColumnProps","config","title","dataIndex","sortable","key","generateDataColumn","defaultProps","hideSelectionColumn","hideClearFilters","ResourceSelectField","optionsContainer","resource","Option","PropertyInput","nestedEntityView","property","propertyInfo","attributeType","mode","cardinality","getSelectMode","allowClear","mandatory","showTime","Field","componentProps","options","rules","required","defaultPropertyItemOptions","formItemOpts","label","Item","formRef","dataInstance","onCancel","submitButtonText","ref","layout","htmlType","reactionDisposer","setFieldsValue","performingLoginRequest","onFinish","login","password","style","minWidth","marginBottom","placeholder","autoFocus","size","block","Create","observer","Controller","NAME","handleSubmit","values","created","toLocaleString","handleCancel","cancel","to","PATH","ghost","onBack","window","history","back","setItem","React","observable","Edit","posts","resourceId","updated","List","showDeletionDialog","Modal","confirm","okText","cancelText","onOk","selectedRowKey","handleRowSelectionChange","deleteSelectedRow","getRecordById","extra","CREATE_PATH","icon","match","params","CREATE_SUBPATH","ROUTE","authorDC","TextArea","rows","Centered","width","height","display","alignItems","justifyContent","Header","Layout","Footer","Content","Sider","App","injectAppStore","loginRequired","initialized","componentSize","minHeight","theme","defaultSelectedKeys","FormOutlined","UserOutlined","float","logout","padding","path","UsersController","component","PostsController","from","exact","spinning","Boolean","location","hostname","errorResponse","Response","serializeEntity","include","r","attrs","f","processCollectionRequest","model","schema","request","queryParams","models","processCollection","l","o","fieldName","isAscending","startsWith","sortOrderModifier","a","b","valA","valB","sortItems","Application","localStorage","createServer","logging","user","MirageModel","extend","hasMany","post","author","belongsTo","comments","comment","factories","MirageFactory","faker","lorem","sentence","body","paragraph","namespace","routes","get","token","users","put","JSON","parse","requestBody","uuidv4","toString","destroy","authorId","seeds","server","user1","findName","createList","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","AppStore","authenticated","usingAnonymously","loadMetadata","resolve","authToken","AppStoreWithMetadata","staticMetadata","target"],"mappings":"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","file":"static/js/main.08044f29.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {AppStore, AppStoreWithMetadata} from \"./AppStore\";\nimport {Application, MetaClassInfo} from \"@tpg-ui/rest\";\nimport {Provider} from \"mobx-react\";\n\nlet globalRest: Application;\nlet globalAppStore: AppStore;\nlet AppContext = React.createContext<AppContextValue>({});\n\nexport interface AppContextValue {\n    rest?: Application;\n}\n\nexport interface AppProviderProps {\n    rest: Application;\n    metadata?: Array<MetaClassInfo>;\n    children: React.ReactNode | React.ReactNode[] | null;\n}\n\nexport const AppProvider: React.FC<AppProviderProps> = (\n    {\n        rest,\n        children,\n        metadata\n    }\n) => {\n    globalRest = rest;\n    if(metadata){\n        globalAppStore = new AppStoreWithMetadata(globalRest,metadata);\n    }else{\n        globalAppStore = new AppStore(globalRest);\n    }\n    globalAppStore.initialize();\n    return <AppContext.Provider value={{rest}}>\n               <Provider appStore={globalAppStore}>\n                           {children}\n               </Provider>\n            </AppContext.Provider>\n};\n\nexport function getRest():Application {\n    return globalRest;\n}","import {DataContainer, DataContainerStatus} from \"./DataContainer\";\nimport {CollectionOptions, CollectionWithCount, Criteria, RelatedOptions, Resource} from \"@tpg-ui/rest\";\nimport {observable, action, runInAction} from \"mobx\";\nimport {getRest, WithId} from \"..\";\n\n\nexport interface DataCollectionStore<T> extends DataContainer {\n    /**\n     * Retrieved entity instances. MobX observable.\n     */\n    items: Array<Resource<T>>;\n    /**\n     * Name of a view used to limit the entity graph. MobX observable.\n     */\n    view?: string;\n    /**\n     * Sort order. Property name opionally preceeded by `+` or `-` character.\n     * If the name is preceeded by `+`, or there is no preceeding character, then the sort order is ascending.\n     * If the name is preceeded by `-`, then the sort order is descending.\n     */\n    sort?: string;\n    /**\n     * An object describing the filtering criteria.\n     * MobX observable.\n     */\n    filter?: Criteria;\n    /**\n     * Maximum number of entities to retrieve.\n     * MobX observable.\n     */\n    limit?: number;\n    /**\n     * Position of the first entity to retrieve. Useful if you want to skip first N entities\n     * (for example, in a pagination scenario).\n     * MobX observable.\n     */\n    offset?: number;\n    /**\n     * Total number of entities available in the source.\n     * MobX observable.\n     */\n    count?: number;\n\n    skipCount?: boolean;\n\n    indexName?: string;\n\n    keyField?: string;\n\n    valueField?: string;\n\n    load: () => Promise<void>;\n\n    clear: () => void;\n    /**\n     * Deletes an entity instance from the source.\n     * @param e - entity instance to be deleted.\n     * @returns promise that resolves when deletion is complete.\n     */\n    delete: (e: WithId) => Promise<any>;\n}\n\nclass DataCollectionStoreImpl<T> implements DataCollectionStore<T> {\n\n    @observable items: Array<Resource<T>> = [];\n    @observable status: DataContainerStatus = \"CLEAN\";\n    @observable view?: string;\n    @observable sort?: string;\n    @observable filter?: Criteria;\n    @observable limit?: number;\n    @observable offset?: number;\n    @observable count?: number;\n    @observable skipCount?: boolean;\n    @observable keyField?: string;\n    @observable valueField?: string;\n    @observable related?: RelatedOptions;\n\n\n    constructor(public readonly resourceName: string,\n                view?: string,\n                sort?: string) {\n        this.view = view;\n        this.sort = sort;\n    }\n\n    @action\n    load = (): Promise<void> => {\n        this.status = \"LOADING\";\n        let loadingPromise;\n\n        if (this.filter) {\n            loadingPromise = this.handleLoadingWithCount(getRest().search<T>(this.resourceName, this.filter, this.collectionOptions,{relatedOptions:this.related}));\n        } else if (this.skipCount === true) {\n            loadingPromise = this.handleLoadingNoCount(getRest().allWithoutCount<T>(this.resourceName, this.collectionOptions,{relatedOptions:this.related}));\n        } else {\n            loadingPromise = this.handleLoadingWithCount(getRest().all<T>(this.resourceName, this.collectionOptions,{relatedOptions:this.related}));\n        }\n\n        loadingPromise.catch(() => runInAction(() => {\n            this.status = 'ERROR';\n        }));\n\n        return loadingPromise;\n    };\n\n    @action\n    search(criteria: Criteria) {\n        this.filter = criteria;\n        return this.load();\n    }\n\n    @action\n    clear = () => {\n        this.items = [];\n        this.status = 'CLEAN';\n        this.count = undefined;\n    };\n\n    @action\n    delete = (e: WithId): Promise<any> => {\n        if (e == null || e.id == null) {\n            throw new Error('Unable to delete entity without ID');\n        }\n        this.status = 'LOADING';\n        return getRest()!.delete(this.resourceName, e.id)\n            .then(action(() => {\n                this.load();\n                return true;\n            }))\n            .catch(action(() => {\n                this.status = \"ERROR\";\n                return true;\n            }));\n    };\n\n    private get collectionOptions(): CollectionOptions {\n        return {\n            view: this.view,\n            sort: this.sort,\n            limit: this.limit,\n            offset: this.offset\n        };\n\n    }\n\n    private handleLoadingWithCount(promise: Promise<CollectionWithCount<T>>) {\n        return promise\n            .then((resp) => {\n                runInAction(() => {\n                    this.items = fromRestModel<T>(resp.data, this.keyField, this.valueField);\n                    this.count = resp.count;\n                    this.status = 'DONE';\n                })\n            })\n    }\n\n    private handleLoadingNoCount(promise: Promise<Array<Resource<T>>>) {\n        return promise\n            .then((resp) => {\n                runInAction(() => {\n                    this.items = fromRestModel<T>(resp, this.keyField, this.valueField);\n                    this.count = undefined;\n                    this.status = 'DONE';\n                })\n            })\n    }\n}\n\nfunction fromRestModel<T>(items: Array<Resource<T>>, keyField?: string, valueField?: string): Array<Resource<T>> {\n    if ((keyField == null || keyField === 'id') && (valueField == null)) {\n        return items;\n    } else {\n        return items.map(i => {\n            const item = i as any;\n            if (keyField != null) {\n                item[keyField] = item.id;\n            }\n\n            if (valueField != null && !item._resourceName) {\n                item._resourceName = item[valueField];\n            }\n            return item;\n        });\n    }\n}\n\nexport interface DataCollectionOptions<R> {\n\n    loadImmediately?: boolean,\n\n    view?: string,\n\n    sort?: string,\n\n    limit?: number,\n\n    offset?: number,\n\n    filter?: Criteria,\n\n    keyField?: keyof R & string,\n\n    //Used for displaying data in lists\n    valueField?: keyof R & string;\n\n}\n\nexport const defaultOpts: DataCollectionOptions<any> = {\n    loadImmediately: true\n};\n\nfunction setOptionsAndLoad<E>(dataCollection: DataCollectionStore<E>, opts: DataCollectionOptions<E>) {\n    if (opts.view != null) {\n        dataCollection.view = opts.view;\n    }\n    if (opts.filter != null) {\n        dataCollection.filter = opts.filter;\n    }\n    if (opts.sort != null) {\n        dataCollection.sort = opts.sort;\n    }\n    if (opts.limit != null) {\n        dataCollection.limit = opts.limit;\n    }\n    if (opts.offset != null) {\n        dataCollection.offset = opts.offset;\n    }\n    if (opts.keyField != null) {\n        dataCollection.keyField = opts.keyField;\n    }\n    if (opts.valueField != null) {\n        dataCollection.valueField = opts.valueField;\n    }\n    if (typeof opts.loadImmediately === 'undefined' || opts.loadImmediately) {\n        dataCollection.load();\n    }\n}\n\nexport const collection = <E extends {}>(entityName: string, opts: DataCollectionOptions<E> = defaultOpts): DataCollectionStore<E> => {\n    const dataCollection = new DataCollectionStoreImpl<E>(entityName);\n    setOptionsAndLoad(dataCollection, opts);\n    return dataCollection;\n};\nexport const relatedCollection = <E extends {}>(\n    entityName: string,\n    fromResource:string,\n    fromResourceId:string,\n    fromRelation:string,\n    opts: DataCollectionOptions<E> = defaultOpts\n): DataCollectionStore<E> => {\n    const dataCollection = new DataCollectionStoreImpl<E>(entityName);\n    dataCollection.related = {\n        fromResource,\n        fromResourceId,\n        fromResourceRelation: fromRelation\n    };\n    setOptionsAndLoad(dataCollection, opts);\n\n    return dataCollection;\n};","/**\n * Retrieves an entity instance using Generic REST API.\n *\n * @typeparam T - entity type.\n */\nimport {DataContainer, DataContainerStatus} from \"./DataContainer\";\nimport {action, observable, runInAction} from \"mobx\";\nimport {getRest} from \"..\";\nimport {RelatedOptions, Resource} from \"@tpg-ui/rest\";\nimport {WithId} from \"../model\";\n\nexport class DataInstanceStore<T> implements DataContainer {\n\n    /**\n     * Retrieved entity instance.\n     */\n    @observable item?: T & Partial<Resource<T>> & WithId;\n    /**\n     * @inheritDoc\n     */\n    @observable status: DataContainerStatus = \"CLEAN\";\n\n    /**\n     * Name of the view used to limit the entity graph.\n     */\n    @observable view?: string;\n\n    /**\n     * Related resource data\n     */\n    @observable related?: RelatedOptions;\n\n    constructor(public readonly resourceName: string,\n                view?:string,\n                ) {\n        this.view = view;\n    }\n\n    /**\n     * Retrieves an entity instance using the given id and view by sending a request to the REST API.\n     *\n     * @param id - id of an entity instance to be retrieved.\n     */\n    @action\n    load = (id: string) => {\n        this.item = undefined;\n        if (!id) {\n            return;\n        }\n        this.status = \"LOADING\";\n        getRest()!.one<T>(this.resourceName, id, {view: this.view},{relatedOptions:this.related})\n            .then((loadedEntity) => {\n                runInAction(() => {\n                    this.item = loadedEntity;\n                    this.status = \"DONE\"\n                })\n            })\n            .catch(() => {\n                runInAction(() => {\n                    this.status = \"ERROR\";\n                })\n            })\n    };\n\n    /**\n     * Sets the {@link item} to the provided value. Changes {@link status} to `DONE`.\n     *\n     * @param item - entity instance to be set as the {@link item}.\n     */\n    @action\n    setItem(item: this[\"item\"]) {\n        this.item = item;\n        this.status = \"DONE\";\n    }\n\n    /**\n     * Updates the {@link item} using a provided `entityPatch`, then sends a request to the REST API to persist the changes.\n     *\n     * @param resourcePatch - a `Partial` representing the changes to be made.\n     * Different REST API endpoints and HTTP methods will be used depending on whether the entity is new.\n     * IMPORTANT:\n     * If this parameter is omitted, then the entity will be considered new if it lacks the `id` attribute.\n     * This will produce incorrect results for String ID entities.\n     * Therefore using this parameter is mandatory for String ID entities.\n     *\n     * @returns a promise that resolves to the update result returned by the REST API.\n     */\n    @action\n    create(resourcePatch: Partial<T>): Promise<any> {\n        Object.assign(this.item, resourcePatch);\n\n        if (this.item == null) {\n            return Promise.reject();\n        }\n        this.status = 'LOADING';\n        return getRest()!.create(this.resourceName, this.item, {relatedOptions:this.related})\n            .then((updateResult) => {\n                runInAction(() => {\n                    this.status = 'DONE';\n                });\n                return updateResult;\n            })\n            .catch((e) => {\n                this.status = 'ERROR';\n                return Promise.reject(e);\n            })\n    }\n\n    @action\n    update(resourcePatch: Partial<T>): Promise<any> {\n        Object.assign(this.item, resourcePatch);\n\n        if (this.item == null) {\n            return Promise.reject();\n        }\n        this.status = 'LOADING';\n        return getRest()!.update(this.resourceName, this.item, {relatedOptions:this.related})\n            .then((updateResult) => {\n                runInAction(() => {\n                    this.status = 'DONE';\n                });\n                return updateResult;\n            })\n            .catch((e) => {\n                this.status = 'ERROR';\n                return Promise.reject(e);\n            })\n    }\n}\n\nexport interface DataInstanceOptions {\n     /**\n     * See {@link DataInstanceStore.view}\n     */\n    view?: string;\n\n}\n\n/**\n * Initialization function that instantiates a {@link DataInstanceStore}.\n *\n * @typeparam T - entity type.\n *\n * @param resourceName - name of the entity to be retrieved.\n * @param opts - {@link DataInstanceStore} configuration.\n */\nexport function instance<T extends {}>(resourceName: string, opts?: DataInstanceOptions):DataInstanceStore<T> {\n    const instance = new DataInstanceStore<T>(resourceName);\n    if (opts && opts.view != null) {\n        instance.view = opts.view;\n    }\n    return instance;\n}\n\nexport function relatedInstance<T extends {}>(resourceName: string, fromResource:string, fromResourceId:string, fromRelation:string, opts?: DataInstanceOptions):DataInstanceStore<T> {\n    const instance = new DataInstanceStore<T>(resourceName);\n    instance.related = {\n        fromResource,\n        fromResourceId,\n        fromResourceRelation: fromRelation\n    };\n    if (opts && opts.view != null) {\n        instance.view = opts.view;\n    }\n    return instance;\n}","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.DefaultStorage = void 0;\r\nvar DefaultStorage = /** @class */ (function () {\r\n    function DefaultStorage() {\r\n        this.items = {};\r\n    }\r\n    Object.defineProperty(DefaultStorage.prototype, \"length\", {\r\n        get: function () {\r\n            return Object.keys(this.items).length;\r\n        },\r\n        enumerable: false,\r\n        configurable: true\r\n    });\r\n    DefaultStorage.prototype.clear = function () {\r\n        this.items = {};\r\n    };\r\n    DefaultStorage.prototype.getItem = function (key) {\r\n        return this.items[key];\r\n    };\r\n    /**\r\n     * @deprecated operation not supported\r\n     */\r\n    DefaultStorage.prototype.key = function (index) {\r\n        throw new Error('Unsupported operation');\r\n    };\r\n    DefaultStorage.prototype.removeItem = function (key) {\r\n        delete this.items[key];\r\n    };\r\n    DefaultStorage.prototype.setItem = function (key, data) {\r\n        this.items[key] = data;\r\n    };\r\n    return DefaultStorage;\r\n}());\r\nexports.DefaultStorage = DefaultStorage;\r\n//# sourceMappingURL=storage.js.map","\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.encodeGetParams = void 0;\r\nfunction encodeGetParams(data) {\r\n    return Object\r\n        .keys(data)\r\n        .map(function (key) {\r\n        return encodeURIComponent(key) + \"=\" + (encodeURIComponent(serialize(data[key])));\r\n    })\r\n        .join(\"&\");\r\n}\r\nexports.encodeGetParams = encodeGetParams;\r\nfunction serialize(rawParam) {\r\n    if (rawParam == null) {\r\n        return '';\r\n    }\r\n    if (typeof rawParam === 'object') {\r\n        return JSON.stringify(rawParam);\r\n    }\r\n    return rawParam;\r\n}\r\n//# sourceMappingURL=utils.js.map","import {observer} from \"mobx-react\";\nimport * as React from \"react\";\nimport {AppStoreInjected, injectAppStore} from \"./app/AppStore\";\n\ntype Props = AppStoreInjected & {\n    entityName: string;\n    propertyName: string;\n}\n\nexport const Msg = injectAppStore(observer(({entityName, propertyName, appStore}: Props) => {\n    if (appStore == null || appStore.messages == null) {\n        return <>{propertyName}</>;\n    }\n    const {messages} = appStore;\n    const message: string = messages[entityName + '.' + propertyName];\n    return message != null\n        ? <>{message}</>\n        : <>{propertyName}</>\n}));","import {MetaClassInfo, MetaPropertyInfo} from \"@tpg-ui/rest\";\n\nexport function getPropertyInfo(metadata: MetaClassInfo[], resourceName: string, propertyName: string): MetaPropertyInfo | null {\n    const metaClass = metadata.find(mci => mci.name === resourceName);\n    if (metaClass == null) {\n        return null;\n    }\n    const propInfo = metaClass.properties.find(prop => prop.name === propertyName);\n    return propInfo || null\n}","export * from './ui/table/DataTable';\nexport * from './ui/form/DataForm';\nexport * from './ui/Login';\n","/**\n * @typeparam E - entity type\n */\nimport {TablePaginationConfig} from \"antd/es/table\";\nimport {SorterResult} from \"antd/es/table/interface\";\nimport {DataCollectionStore} from \"@tpg-ui/core\";\nimport { ColumnProps } from \"antd/lib/table\";\n\nexport interface TableChangeDTO<E> {\n    /**\n     * Received in antd {@link https://3x.ant.design/components/table | Table}'s `onChange` callback\n     */\n    pagination: TablePaginationConfig,\n    /**\n     * Received in antd {@link https://3x.ant.design/components/table | Table}'s `onChange` callback\n     */\n    filters: Record<string, string[]>,\n    /**\n     * Received in antd {@link https://3x.ant.design/components/table | Table}'s `onChange` callback\n     */\n    sorter:  SorterResult<E>| SorterResult<E>[],\n    /**\n     * Default sort order.\n     * Property name opionally preceeded by `+` or `-` character.\n     * If the name is preceeded by `+`, or there is no preceeding character, then the sort order is ascending.\n     * If the name is preceeded by `-`, then the sort order is descending.\n     */\n    defaultSort: string | undefined,\n    /**\n     * Names of the entity properties that should be displayed.\n     */\n    fields: string[],\n\n    dataCollection: DataCollectionStore<E>,\n}\n\n\nexport function setFilters<E>(\n    // @ts-ignore\n    tableFilters: Record<string, string[]>,\n    // @ts-ignore\n    fields: string[],\n    // @ts-ignore\n    dataCollection: DataCollectionStore<E>,\n){\n\n}\n\nexport function setSorter<E>(sorter:  SorterResult<E>| SorterResult<E>[], defaultSort: string | undefined, dataCollection: DataCollectionStore<E>) {\n    if(Array.isArray(sorter)){\n        sorter = sorter[0];\n    }\n\n    if (sorter && sorter.order) {\n        const sortOrderPrefix: string = (sorter.order === 'descend') ? '-' : '+';\n\n        let sortField = sorter.field;\n\n        dataCollection.sort = sortOrderPrefix + sortField;\n    } else {\n        dataCollection.sort = defaultSort;\n    }\n}\n\nexport function handleTableChange<E>(tableChangeDTO: TableChangeDTO<E>): Promise<void> {\n    const {\n        pagination,\n        filters,\n        sorter,\n        defaultSort,\n        fields,\n        dataCollection\n    } = tableChangeDTO;\n\n    setFilters(filters, fields, dataCollection);\n    setSorter(sorter, defaultSort, dataCollection);\n    setPagination(pagination, dataCollection);\n\n    return dataCollection.load();\n}\n\nexport function setPagination<E>(pagination: TablePaginationConfig, dataCollection: DataCollectionStore<E>, reload: boolean = false) {\n\n    const {disabled, pageSize, current} = pagination;\n\n    if (disabled === true) {\n        dataCollection.limit = undefined;\n        dataCollection.offset = undefined;\n        dataCollection.skipCount = true;\n        if (reload) dataCollection.load();\n        return;\n    }\n\n    // need to sync enabled pagination config and dataCollection - reset limit and offset\n    if (dataCollection.skipCount) {\n        dataCollection.skipCount = false;\n    }\n\n    if (pageSize && current) {\n        dataCollection.limit = pageSize;\n        dataCollection.offset = pageSize * (current - 1);\n    }\n\n    if (reload) dataCollection.load();\n}\nexport interface DataColumnConfig {\n    propertyName: string,\n    resourceName: string,\n    sortable: boolean,\n}\n\nexport function generateDataColumn<EntityType>(config: DataColumnConfig): ColumnProps<EntityType> {\n    const {\n        propertyName,\n        sortable,\n    } = config;\n\n\n    let defaultColumnProps: ColumnProps<EntityType> = {\n        title: propertyName,\n        dataIndex:propertyName,\n        sorter: sortable,\n        key: propertyName,\n        //render: (text, record) => DataTableCell<EntityType>({propertyInfo, text, mainStore, record})\n    };\n\n    return defaultColumnProps;\n}","import {ColumnProps} from \"antd/es/table\";\nimport {generateDataColumn} from \"./DataTableHelpers\";\nimport {DataTable} from \"./DataTable\";\n\nexport interface ColumnDefinition<E> {\n    /**\n     * Entity property name.\n     * Use it if you want to create a custom variant of the default property-bound column.\n     * In this case the properties in {@link columnProps} will override the default\n     * look&feel (defaults will still apply to the properties not contained in {@link columnProps}).\n     * If you want to create a custom column that is not bound to an entity property\n     * (e.g. an action button column or a calculated field column), do not use this prop.\n     */\n    field?: string,\n    /**\n     * If {@link field} is provided, then these properties will override the default look&feel\n     * (defaults will still apply to the properties not contained in {@link columnProps}).\n     * If you want to create a custom column that is not bound to an entity property\n     * (e.g. an action button column or a calculated field column) use this prop only and do not use {@link field}.\n     * In this case only the properties present in {@link columnProps} will be applied to the column.\n     */\n    columnProps: ColumnProps<E>\n}\n\nexport function generateColumnProps<E>(resourceName:string, columnDefinitions:Array<string | ColumnDefinition<E>>):Array<ColumnProps<E>> {\n    if (!columnDefinitions) {\n        throw new Error(`[DataTable.generateColumnProps, resource: ${resourceName}] ${DataTable.NO_COLUMN_DEF_ERROR}`);\n    }\n    return columnDefinitions.map((columnDef)=>{\n        const propertyName = columnDefToPropertyName(columnDef);\n        const columnSettings = (columnDef as ColumnDefinition<E>).columnProps;\n\n        if (propertyName != null) {\n            // Column is bound to an entity property\n\n            const generatedColumnProps = generateDataColumn<E>({\n                resourceName,\n                propertyName,\n                sortable: true,\n            });\n\n            return {\n                ...generatedColumnProps,\n                ...(columnSettings ? columnSettings : [])\n            };\n        }\n\n        if (columnSettings != null) {\n            // Column is not be bound to an entity property. It is a column fully constructed by client.\n            // E.g. it can be a calculated column or an action column.\n            return columnSettings;\n        }\n\n        throw new Error(`[DataTable.generateColumnProps, resource: ${resourceName}] Neither field name nor columnProps were provided`);\n    });\n}\n\nexport function fieldsFromColumnDefs<E>(columnDefinitions:Array<string | ColumnDefinition<E>>) {\n    return columnDefinitions.reduce((accumulatedFields: string[], columnDefinition: string | ColumnDefinition<E>) => {\n        const propertyName = columnDefToPropertyName<E>(columnDefinition);\n        if(propertyName!=null){\n            accumulatedFields.push(propertyName);\n        }\n        return accumulatedFields;\n    }, []);\n}\n\nfunction columnDefToPropertyName<E>(columnDef: string | ColumnDefinition<E>): string | undefined {\n    return typeof columnDef === 'string' ? columnDef : columnDef.field;\n}","import * as React from \"react\";\nimport {Table,message} from \"antd\";\nimport {DataCollectionStore, WithId} from \"@tpg-ui/core\";\nimport {ColumnProps, TablePaginationConfig, TableProps} from \"antd/es/table\";\nimport { observer } from \"mobx-react\";\nimport { computed, action, observable, IReactionDisposer, reaction } from \"mobx\";\nimport {RowSelectionType, SorterResult} from \"antd/es/table/interface\";\nimport {handleTableChange} from \"./DataTableHelpers\";\nimport {ColumnDefinition, generateColumnProps, fieldsFromColumnDefs} from \"./DataTableColumn\";\n\n/**\n * @typeparam E - entity type.\n */\nexport interface DataTableProps<E> {\n    dataCollection: DataCollectionStore<E>,\n\n    /**\n     * Names of columns that should have filters enabled.\n     * Default: filters will be enabled on all columns. Pass empty array to disable all filters.\n     */\n    enableFiltersOnColumns?: string[],\n    /**\n     * By default, when any number of filters is active, a `Clear filters` control will be displayed above the\n     * table. When clicked, this control disables all filters at once.\n     * If `hideClearFilters` is `true`, then the `Clear filters` control won't be displayed.\n     * Default: `false`\n     */\n    hideClearFilters?: boolean,\n    /**\n     * A callback that takes the ids of the selected rows.\n     * Can be used together with {@link buttons} to facilitate CRUD operations or other functionality.\n     *\n     * @param selectedRowKeys - entity ids corresponding to the selected rows.\n     */\n    onRowSelectionChange?: (selectedRowKeys: React.Key[]) => void,\n    /**\n     * `single` allows to select one row at a time.\n     * `multi` allows to select multiple rows.\n     * `none` disables row selection.\n     * Default: `single`.\n     */\n    rowSelectionMode?: 'single' | 'multi' | 'none',\n    /**\n     * When `true`, hides the {@link https://3x.ant.design/components/table | selection column}.\n     * Default: `false`.\n     */\n    hideSelectionColumn?: boolean;\n    /**\n     * When `true`, a row can be selected by clicking on it.\n     * When `false`, a row can only be selected using\n     * the {@link https://3x.ant.design/components/table | selection column}.\n     * Default: `true`.\n     */\n    canSelectRowByClick?: boolean,\n    /**\n     * Controls that will be rendered above the table.\n     */\n    buttons?: JSX.Element,\n    /**\n     * Can be used to override any of the underlying\n     * {@link https://3x.ant.design/components/table/#Table | Table properties}.\n     */\n    tableProps?: TableProps<E & {}>,\n\n    /**\n     * Describes the columns to be displayed. An element of this array can be\n     * a property name (which will render a column displaying that property;\n     * the column will have the default look&feel)\n     * or a {@link ColumnDefinition} object (which allows creating a custom column).\n     *\n     * NOTE: you need to use either {@link columnDefinitions} or {@link fields} (deprecated)\n     * for the `DataTable` to work.\n     */\n    columnDefinitions?: Array<string | ColumnDefinition<E>>\n}\n\n@observer\nexport class DataTable<E> extends React.Component<DataTableProps<E>>{\n\n    static readonly NO_COLUMN_DEF_ERROR = 'You need to provide either columnDefinitions or fields prop';\n\n    defaultSort: string | undefined;\n\n    @observable selectedRowKeys: React.Key[] = [];\n\n    disposers: IReactionDisposer[] = [];\n\n    static defaultProps = {\n        rowSelectionMode: 'single' as 'single' | 'multi' | 'none',\n        canSelectRowByClick: true,\n        hideSelectionColumn: false,\n        hideClearFilters: false,\n    };\n\n    constructor(props: DataTableProps<E>) {\n        super(props);\n\n        const {sort} = this.props.dataCollection;\n        // if (filter) {\n        //     this.tableFilters = entityFilterToTableFilters(filter, this.fields);\n        // }\n        this.defaultSort = sort;\n    }\n\n    get errorContext(): string {\n        return `[DataTable, resource: ${this.props.dataCollection.resourceName}]`;\n    }\n\n    get rowSelectionType(): RowSelectionType {\n        switch (this.props.rowSelectionMode) {\n            case 'multi':\n                return 'checkbox';\n            case 'single':\n                return 'radio';\n            default:\n                throw new Error(`${this.errorContext} rowSelectionMode is not expected to be ${this.props.rowSelectionMode} at this point`);\n        }\n    }\n\n    @computed\n    get paginationConfig(): TablePaginationConfig {\n        return {\n            showSizeChanger: false,\n            total: this.props.dataCollection.count,\n        };\n    }\n    @computed get fields(): string[] {\n        const {columnDefinitions} = this.props;\n\n        if(!columnDefinitions){\n            throw new Error(`${this.errorContext}] Neither field name nor columnProps were provided`);\n        }\n\n        return fieldsFromColumnDefs<E>(columnDefinitions);\n    }\n\n    @action\n    onChange = (pagination: TablePaginationConfig, filters: Record<string, any>, sorter: SorterResult<E>| SorterResult<E>[] ): void => {\n        const {defaultSort, fields} = this;\n        const {dataCollection} = this.props;\n         handleTableChange<E>({\n             pagination, filters, sorter, defaultSort, fields, dataCollection\n         });\n    };\n\n    @computed\n    get generateColumnProps(): Array<ColumnProps<E>> {\n        const {dataCollection,columnDefinitions} = this.props;\n        if(!columnDefinitions){\n            throw new Error(`${this.errorContext}] Neither field name nor columnProps were provided`);\n        }\n        return generateColumnProps(dataCollection.resourceName,columnDefinitions);\n    };\n\n    get isRowSelectionEnabled(): boolean {\n        if (!this.props.rowSelectionMode) {\n            throw new Error(`${this.errorContext} rowSelectionMode is expected to be defined at this point`);\n        }\n        return ['single', 'multi'].indexOf(this.props.rowSelectionMode) > -1;\n    }\n\n    @action\n    onRowSelectionColumnClicked = (selectedRowKeys: React.Key[]): void => {\n        if (this.isRowSelectionEnabled) {\n            this.selectedRowKeys = selectedRowKeys;\n        }\n    };\n    @action\n    onRow = (record: E) => {\n        return {\n            onClick: () => this.onRowClicked(record)\n        }\n    };\n\n    @action\n    onRowClicked = (record: E): void => {\n        if (this.isRowSelectionEnabled) {\n            const clickedRowKey = this.constructRowKey(record);\n\n            let newSelectedRowKeys = this.selectedRowKeys.slice();\n\n            switch (this.props.rowSelectionMode) {\n                case 'multi':\n                    const clickedRowKeyIndex = this.selectedRowKeys.indexOf(clickedRowKey);\n                    if (clickedRowKeyIndex > -1) {\n                        // Deselect row in 'multi' mode\n                        newSelectedRowKeys.splice(clickedRowKeyIndex, 1);\n                    } else {\n                        // Select row in 'multi' mode\n                        newSelectedRowKeys.push(clickedRowKey);\n                    }\n                    break;\n                case 'single':\n                    if (this.selectedRowKeys.length > 0 && this.selectedRowKeys[0] === clickedRowKey) {\n                        // Deselect row in 'single' mode\n                        newSelectedRowKeys = [];\n                    } else {\n                        // Select row in 'single' mode\n                        newSelectedRowKeys[0] = clickedRowKey;\n                    }\n                    break;\n            }\n\n            this.selectedRowKeys = newSelectedRowKeys;\n        }\n    };\n\n    onRowSelectionChange = () => {\n        switch (this.props.rowSelectionMode) {\n            case undefined:\n                throw new Error(`${this.errorContext} rowSelectionMode is not expected to be ${this.props.rowSelectionMode} at this point`);\n            case 'none':\n                return;\n            case 'multi':\n            case 'single':\n                if (this.props.onRowSelectionChange) {\n                    this.props.onRowSelectionChange(this.selectedRowKeys);\n                }\n                break;\n            default:\n                new Error(this.errorContext+ ' rowSelectionMode:'+ this.props.rowSelectionMode);\n        }\n    };\n\n    componentDidMount(): void {\n\n\n        // Display error message if dataCollection.load has failed\n        this.disposers.push(reaction(\n            () => this.props.dataCollection.status,\n            (status) => {\n                if (status === 'ERROR') {\n                    message.error(this.errorContext + \"Loading failed\");\n                }\n            }\n        ));\n\n        // Call corresponding callback(s) when selectedRowKeys is changed\n        this.disposers.push(reaction(\n            () => this.selectedRowKeys,\n            this.onRowSelectionChange\n        ));\n\n        // Clear row selection when rowSelectionMode is changed\n        this.disposers.push(reaction(\n            () => this.props.rowSelectionMode,\n            () => {\n                this.selectedRowKeys = [];\n            }\n        ))\n    }\n\n    componentWillUnmount(): void {\n        this.disposers.forEach((dispose: IReactionDisposer) => dispose());\n    }\n\n    render() {\n        const { status, items } = this.props.dataCollection;\n\n\n        let defaultTableProps: TableProps<E> = {\n            loading: status === 'LOADING',\n            dataSource: items,\n            pagination: this.paginationConfig,\n            rowKey: record => this.constructRowKey(record),\n            columns: this.generateColumnProps,\n            onChange:this.onChange\n        };\n\n        if (this.isRowSelectionEnabled) {\n            defaultTableProps = {\n                ...defaultTableProps,\n                rowSelection: {\n                    type: this.rowSelectionType,\n                    selectedRowKeys: this.selectedRowKeys,\n                    onChange: this.onRowSelectionColumnClicked,\n                },\n            };\n\n            if (this.props.canSelectRowByClick) {\n                defaultTableProps = {\n                    ...defaultTableProps,\n                    onRow: this.onRow,\n                };\n            }\n        }\n\n\n        const tableProps = { ...defaultTableProps, ...this.props.tableProps };\n\n        return<div className='tpg-ui-data-table'>\n            <div className='buttons'>\n                {this.props.buttons}\n            </div>\n            <Table {...tableProps}>\n\n            </Table>\n        </div>\n    }\n\n    constructRowKey(record: E & WithId): string {\n        return record.id!;\n    }\n}","import {observer} from \"mobx-react\";\nimport {Select} from \"antd\";\nimport * as React from \"react\";\nimport {DataCollectionStore, WithId} from \"@tpg-ui/core\";\n\nexport interface ResourceSelectFieldProps {\n    optionsContainer?: DataCollectionStore<WithId>,\n    allowClear?: boolean,\n}\n\nexport const ResourceSelectField = observer((props: ResourceSelectFieldProps) => {\n    const {optionsContainer, ...rest} = props;\n    return (\n        <Select {...rest} loading={optionsContainer && optionsContainer.status === \"LOADING\"} >\n            {optionsContainer && optionsContainer.items.map(resource =>\n                <Select.Option value={resource.id!} key={resource.id!}>\n                    {resource._resourceName}\n                </Select.Option>)\n            }\n        </Select>);\n});","import * as React from \"react\";\nimport {AppStoreInjected, DataCollectionStore, getPropertyInfo, injectAppStore, Msg, WithId} from \"@tpg-ui/core\";\nimport { observer } from \"mobx-react\";\nimport {Checkbox, DatePicker, Form, Input, TimePicker} from \"antd\";\nimport {InputProps} from \"antd/es/input\";\nimport {FormItemProps} from \"antd/es/form\";\nimport {ResourceSelectField} from \"./ResourceSelectField\";\nimport {Cardinality, MetaClassInfo, MetaPropertyInfo} from \"@tpg-ui/rest\";\nimport {CheckboxProps} from \"antd/es/checkbox\";\nimport {DatePickerProps} from \"antd/es/date-picker\";\nimport {TimePickerProps} from \"antd/es/time-picker\";\n\nexport type PropertyInputProps = AppStoreInjected & {\n    resourceName: string;\n    propertyName: string;\n    disabled?: boolean;\n    optionsContainer?: DataCollectionStore<WithId>;\n    nestedEntityView?: string;\n    parentEntityInstanceId?: string;\n} & FormFieldComponentProps;\n\nexport type FormFieldComponentProps = InputProps;\n\nexport const PropertyInput:React.FC<PropertyInputProps> = injectAppStore(observer((props: PropertyInputProps) => {\n    const {resourceName,propertyName, disabled, appStore, optionsContainer, nestedEntityView, ...rest} = props;\n    if (appStore == null || appStore.metadata == null) {\n        return <Input {...(rest as InputProps)}/>;\n    }\n\n    const propertyInfo = getPropertyInfo(appStore!.metadata, resourceName, propertyName);\n\n    if(!propertyInfo){\n        return <Input {...(rest as InputProps)}/>\n    }\n\n    switch (propertyInfo.attributeType) {\n        case \"ASSOCIATION\":\n            const mode = getSelectMode(propertyInfo.cardinality);\n            return <ResourceSelectField {...{mode,optionsContainer}} allowClear={isClearAllowed(propertyInfo)} {...rest}/>;\n        case 'COMPOSITION':\n            throw new Error('Composition input not implemented yet');\n        case 'ENUM':\n            throw new Error('ENUM input not implemented yet');\n    }\n\n    switch (propertyInfo.type) {\n        case 'boolean':\n            return <Checkbox {...(rest as CheckboxProps)}/>;\n        case 'date':\n            return <DatePicker {...(rest as DatePickerProps)}/>;\n        case 'dateTime':\n            return <DatePicker {...{showTime:true, ...(rest as DatePickerProps)}} />;\n        case 'time':\n            return <TimePicker {...(rest as TimePickerProps)}/>;\n    }\n\n    return <Input {...(rest as InputProps)}/>\n\n\n}));\n\n\nexport interface FieldProps extends AppStoreInjected{\n    resourceName: string;\n    propertyName: string;\n\n    disabled?: boolean;\n\n    /**\n     * Props that will be passed through to {@link https://3x.ant.design/components/form/ | Form.Item} component.\n     */\n    formItemOpts?: FormItemProps;\n\n    /**\n     * Props that will be passed through to the underlying component (i.e. the actual component\n     * that will be rendered, such as `DatePicker` or `Select`).\n     */\n    componentProps?: FormFieldComponentProps;\n\n    /**\n     * This prop shall be supplied if the entity property has Association relation type.\n     * It is a data collection containing entity instances that can be assigned to this property\n     * (i.e. possible options that can be selected in a form field).\n     */\n    optionsContainer?: DataCollectionStore<WithId>;\n}\nexport const Field:React.FC<FieldProps> = injectAppStore(observer((props) => {\n    // @ts-ignore PHPStorm do not see the children property\n    const {resourceName,propertyName, appStore, children, optionsContainer, componentProps, disabled} = props;\n    const defaultOpts = defaultPropertyItemOptions(appStore?.metadata,resourceName,propertyName);\n    const formItemOpts: FormItemProps = {... props.formItemOpts};\n\n    if (!formItemOpts.label) {\n        formItemOpts.label = <Msg entityName={resourceName} propertyName={propertyName}/>\n    }\n\n    return <Form.Item {...{...defaultOpts,...formItemOpts}}>\n            <PropertyInput resourceName={resourceName} propertyName={propertyName} optionsContainer={optionsContainer} {...componentProps}  />\n    </Form.Item>\n\n}));\n\nfunction defaultPropertyItemOptions(metadata: MetaClassInfo[]|undefined, resourceName: string, propertyName: string):FormItemProps\n{\n    const options:FormItemProps = {\n        name: propertyName\n    };\n    if(!metadata){\n        return options;\n    }\n\n    const propertyInfo = getPropertyInfo(metadata, resourceName, propertyName);\n    if(!propertyInfo){\n        return options;\n    }\n    options.rules = propertyInfo.mandatory?[{required:true}]:undefined;\n\n    return options;\n}\n\nfunction getSelectMode(cardinality: Cardinality): \"default\" | \"multiple\" {\n    if (cardinality === \"ONE_TO_MANY\" || cardinality === \"MANY_TO_MANY\") {\n        return \"multiple\"\n    }\n    return \"default\";\n}\n\nfunction isClearAllowed(property:MetaPropertyInfo):boolean {\n    return !property.mandatory;\n}","import * as React from \"react\";\nimport {Button, Form} from \"antd\";\nimport { observer } from \"mobx-react\";\nimport {FormInstance, FormProps} from \"antd/es/form\";\nimport { IReactionDisposer, reaction } from \"mobx\";\nimport {DataInstanceStore} from \"@tpg-ui/core\";\n\nexport interface DataFormProps {\n    onCancel: () => void;\n    dataInstance: DataInstanceStore<any>,\n    /**\n     * This prop can be used to override the default caption on Submit button\n     */\n    submitButtonText?: string;\n}\n\n@observer\nexport class DataForm extends React.Component<DataFormProps & FormProps, any>{\n\n    formRef = React.createRef<FormInstance>();\n\n    reactionDisposer: IReactionDisposer;\n\n    render() {\n        const {dataInstance, onCancel, submitButtonText, children, ...rest} = this.props;\n        const {status} = dataInstance;\n\n        return <Form ref={this.formRef} layout=\"vertical\" className={'resource-form'} {...rest}>\n            {children}\n            <Form.Item className={'actions'}>\n                <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    disabled={status !== \"DONE\" && status !== \"ERROR\"}\n                    loading={status === \"LOADING\"}\n                >\n                    {submitButtonText}\n                </Button>\n                <Button htmlType=\"button\"\n                        onClick={onCancel}\n                >\n                    Cancel\n                </Button>\n\n            </Form.Item>\n        </Form>\n    }\n    componentDidMount() {\n\n\n        this.reactionDisposer = reaction(\n            () => {\n                return this.props.dataInstance.item\n            },\n            () => {\n                if(this.props.dataInstance.item) {\n                    this.formRef.current!.setFieldsValue(this.props.dataInstance.item);\n                }\n            }\n        )\n    }\n    componentWillUnmount() {\n        this.reactionDisposer();\n    }\n}\nexport * from './DataFormField';","import * as React from \"react\";\nimport {Button, Form, Input, message} from \"antd\";\nimport {observer} from \"mobx-react\";\nimport {action, observable} from \"mobx\";\nimport {AppStoreInjected, injectAppStore} from \"@tpg-ui/core\";\n\n@injectAppStore\n@observer\nexport class Login extends React.Component<AppStoreInjected> {\n\n    @observable performingLoginRequest = false;\n\n    @action\n    onFinish = (data:any) => {\n        this.props.appStore!.login(data.login, data.password)\n            .then(action(() => {\n                this.performingLoginRequest = false;\n            }))\n            .catch(action(() => {\n                this.performingLoginRequest = false;\n                message.error('login failed');\n            }));\n    };\n\n    render() {\n        return (\n            <div className='Login' style={{minWidth:'300px'}}>\n                <Form layout='vertical' onFinish={this.onFinish}>\n                    <Form.Item style={{marginBottom: 0}}>\n                        <Input placeholder='Login'\n                               autoFocus={true}\n                               size='large'/>\n                    </Form.Item>\n                    <Form.Item>\n                        <Input placeholder='Password'\n                               type='password'\n                               size='large'/>\n                    </Form.Item>\n                    <Form.Item>\n                        <Button type='primary'\n                                htmlType='submit'\n                                size='large'\n                                block={true}\n                                loading={this.performingLoginRequest}>\n                            Submit\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\nimport {instance} from \"@tpg-ui/core\";\nimport {message, PageHeader} from \"antd\";\nimport { observer } from \"mobx-react\";\nimport {observable } from \"mobx\";\nimport {Redirect} from \"react-router-dom\";\nimport {DataForm, Field} from \"@tpg-ui/ui\";\nimport {Controller} from \"./Controller\";\n\n@observer\nexport class Create extends React.Component{\n\n    dataInstance = instance(Controller.NAME);\n    @observable created = false;\n    @observable cancel = false;\n\n    handleSubmit = (values:any) => {\n        this.dataInstance.create(values).then((e)=>{\n            this.created = true;\n        }).catch(e=>{\n            message.error(e.toLocaleString());\n        });\n    };\n\n    handleCancel = () => {\n        this.cancel = true;\n    };\n\n    render() {\n        if (this.created || this.cancel) {\n            return <Redirect to={Controller.PATH}/>\n        }\n        const {resourceName} = this.dataInstance;\n        return <PageHeader ghost={false} title=\"New user\" onBack={() => window.history.back()}>\n                <DataForm layout={\"vertical\"} submitButtonText={\"Save\"} onFinish={this.handleSubmit} dataInstance={this.dataInstance} onCancel={this.handleCancel}>\n                <Field resourceName={resourceName} propertyName={'name'}/>\n            </DataForm>\n        </PageHeader>}\n\n    componentDidMount() {\n        this.dataInstance.setItem({});\n    }\n}\n","import * as React from \"react\";\nimport {instance, Msg, relatedCollection, relatedInstance} from \"@tpg-ui/core\";\nimport { observer } from \"mobx-react\";\nimport {observable } from \"mobx\";\nimport {Redirect} from \"react-router-dom\";\nimport {Controller} from \"./Controller\";\nimport {DataForm, DataTable, Field} from \"@tpg-ui/ui\";\nimport {Form, PageHeader} from \"antd\";\n\ninterface Props {\n    resourceId:string;\n}\n\n@observer\nexport class Edit extends React.Component<Props>{\n\n    dataInstance = instance(Controller.NAME);\n    posts = relatedCollection('posts',Controller.NAME,this.props.resourceId,'posts');\n    @observable updated = false;\n    @observable cancel = false;\n\n    handleSubmit = (values:any) => {\n        this.dataInstance.update(values).then((e)=>{\n            this.updated = true;\n        });\n    };\n\n    handleCancel = () => {\n        this.cancel = true;\n    };\n\n    render() {\n        if (this.updated || this.cancel) {\n            return <Redirect to={Controller.PATH}/>\n        }\n        const {resourceName} = this.dataInstance;\n        return <PageHeader ghost={false} title=\"Edit user\" onBack={() => window.history.back()}>\n        <DataForm layout={\"vertical\"} submitButtonText={\"Save\"} onFinish={this.handleSubmit} dataInstance={this.dataInstance} onCancel={this.handleCancel}>\n            <Field resourceName={resourceName} propertyName={'name'}/>\n            <Form.Item label={<Msg propertyName={'posts'} entityName={Controller.NAME}/>}>\n                <DataTable dataCollection={this.posts} columnDefinitions={['title']} rowSelectionMode={\"none\"}/>\n            </Form.Item>\n        </DataForm>\n        </PageHeader>\n    }\n\n    componentDidMount() {\n        this.dataInstance.load(this.props.resourceId);\n    }\n}\n","import * as React from \"react\";\nimport {DataTable} from \"@tpg-ui/ui\";\nimport {collection} from \"@tpg-ui/core\";\nimport {observer} from \"mobx-react\";\nimport {Button, Modal, PageHeader, Space} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {PlusOutlined} from \"@ant-design/icons/lib\";\nimport {observable} from \"mobx\";\nimport {Resource} from \"@tpg-ui/rest\";\nimport {Controller} from \"./Controller\";\n\n@observer\nexport class List extends React.Component {\n    @observable selectedRowKey: string | undefined;\n    collection = collection<any>(Controller.NAME);\n\n    showDeletionDialog = (e: Resource<any>) => {\n        Modal.confirm({\n            title: `Are you sure you want to delete ${e.name}?`,\n            okText: 'Delete',\n            cancelText: 'Cancel',\n            onOk: () => {\n                this.selectedRowKey = undefined;\n                return this.collection.delete(e);\n            }\n        });\n    };\n\n\n    render() {\n        return <PageHeader\n            ghost={false}\n            title=\"Users management\"\n            extra={[\n                    <>\n                    <Link\n                        to={Controller.CREATE_PATH}\n                        key='create'>\n                        <Button type='primary' icon={<PlusOutlined/>}>Create</Button>\n                    </Link>\n                    </>,\n                <>\n                <Link\n                    to={Controller.PATH + '/' + this.selectedRowKey}\n                    key='edit'>\n                    <Button disabled={!this.selectedRowKey} type='default'>Edit</Button>\n                </Link>\n                </>,\n                <>\n                <Button\n                    disabled={!this.selectedRowKey}\n                    onClick={this.deleteSelectedRow}\n                    key='remove'\n                    type='default'>\n                    Remove\n                </Button>\n                </>\n            ]}\n        >\n        <DataTable dataCollection={this.collection} columnDefinitions={['name']}\n                          hideSelectionColumn={true}\n                          onRowSelectionChange={this.handleRowSelectionChange}\n                         />\n        </PageHeader>\n    }\n\n    getRecordById(id: string): Resource<any> {\n        const record: Resource<any> | undefined =\n            this.collection.items.find(record => record.id === id);\n\n        if (!record) {\n            throw new Error('Cannot find entity with id ' + id);\n        }\n\n        return record;\n    }\n\n    handleRowSelectionChange = (selectedRowKeys: React.Key[]) => {\n        this.selectedRowKey = selectedRowKeys[0] as string;\n    };\n\n    deleteSelectedRow = () => {\n        this.showDeletionDialog(this.getRecordById(this.selectedRowKey!));\n    };\n}","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport {Card} from \"antd\";\nimport {Create} from \"./Create\";\nimport {Edit} from \"./Edit\";\nimport {List} from \"./List\";\n\ntype Props = RouteComponentProps<{resourceId?: string}>;\n\nexport class Controller extends React.Component<Props>{\n\n    static NAME = 'users';\n    static PATH = '/users';\n    static CREATE_SUBPATH = 'create';\n    static CREATE_PATH = Controller.PATH+'/'+Controller.CREATE_SUBPATH;\n    static ROUTE = Controller.PATH + '/:resourceId?';\n\n\n    render() {\n        const {resourceId} = this.props.match.params;\n        return (\n            <>\n\n                {resourceId\n                    ? (\n                        resourceId==Controller.CREATE_SUBPATH\n                            ?<Create/>\n                            :<Edit resourceId={resourceId}/>)\n                    : <List/>}\n            </>\n        )\n    }\n}","import * as React from \"react\";\nimport {collection, instance, Msg} from \"@tpg-ui/core\";\nimport {Form, Input, message, PageHeader} from \"antd\";\nimport { observer } from \"mobx-react\";\nimport {observable } from \"mobx\";\nimport {Redirect} from \"react-router-dom\";\nimport {DataForm, Field} from \"@tpg-ui/ui\";\nimport {Controller} from \"./Controller\";\nimport {User} from \"../../Model\";\n\n@observer\nexport class Create extends React.Component{\n\n    dataInstance = instance(Controller.NAME);\n    authorDC = collection<User>('users',{valueField:'name'});\n    @observable created = false;\n    @observable cancel = false;\n\n    handleSubmit = (values:any) => {\n        this.dataInstance.create(values).then((e)=>{\n            this.created = true;\n        }).catch(e=>{\n            message.error(e.toLocaleString());\n        });\n    };\n\n    handleCancel = () => {\n        this.cancel = true;\n    };\n\n    render() {\n        if (this.created || this.cancel) {\n            return <Redirect to={Controller.PATH}/>\n        }\n        const {resourceName} = this.dataInstance;\n        return <PageHeader ghost={false} title=\"New publication\" onBack={() => window.history.back()}>\n            <DataForm layout={\"vertical\"} submitButtonText={\"Save\"} onFinish={this.handleSubmit} dataInstance={this.dataInstance} onCancel={this.handleCancel}>\n            <Field resourceName={resourceName} propertyName={'title'}/>\n            <Form.Item name={'body'} label={<Msg entityName={Controller.NAME} propertyName={'body'} />} rules={[{required: true}]}>\n                <Input.TextArea rows={8} />\n            </Form.Item>\n            <Field resourceName={resourceName} propertyName={'author'} optionsContainer={this.authorDC}/>\n        </DataForm>\n        </PageHeader>\n    }\n\n    componentDidMount() {\n        this.dataInstance.setItem({});\n    }\n}\n","import * as React from \"react\";\nimport {collection, instance, Msg} from \"@tpg-ui/core\";\nimport { observer } from \"mobx-react\";\nimport {observable } from \"mobx\";\nimport {Redirect} from \"react-router-dom\";\nimport {Controller} from \"./Controller\";\nimport {DataForm, Field} from \"@tpg-ui/ui\";\nimport {User} from \"../../Model\";\nimport {Form, Input, message, PageHeader} from \"antd\";\n\ninterface Props {\n    resourceId:string;\n}\n\n@observer\nexport class Edit extends React.Component<Props>{\n\n    dataInstance = instance(Controller.NAME);\n    authorDC = collection<User>('users',{valueField:'name'});\n    @observable updated = false;\n    @observable cancel = false;\n\n    handleSubmit = (values:any) => {\n        this.dataInstance.update(values).then((e)=>{\n            this.updated = true;\n        }).catch(e=>{\n            message.error(e.toLocaleString());\n        });\n    };\n\n    handleCancel = () => {\n        this.cancel = true;\n    };\n\n    render() {\n        if (this.updated || this.cancel) {\n            return <Redirect to={Controller.PATH}/>\n        }\n        const {resourceName} = this.dataInstance;\n        return <PageHeader ghost={false} title=\"Modify publication\" onBack={() => window.history.back()}>\n            <DataForm layout={\"vertical\"} submitButtonText={\"Save\"} onFinish={this.handleSubmit} dataInstance={this.dataInstance} onCancel={this.handleCancel}>\n            <Field resourceName={resourceName} propertyName={'title'}/>\n            <Form.Item name={'body'} label={<Msg entityName={Controller.NAME} propertyName={'body'} />} rules={[{required: true}]}>\n                <Input.TextArea rows={8} />\n            </Form.Item>\n            <Field resourceName={resourceName} propertyName={'author'} optionsContainer={this.authorDC}/>\n        </DataForm>\n        </PageHeader>\n    }\n\n    componentDidMount() {\n        this.dataInstance.load(this.props.resourceId);\n    }\n}\n","import * as React from \"react\";\nimport {DataTable} from \"@tpg-ui/ui\";\nimport {collection} from \"@tpg-ui/core\";\nimport {observer} from \"mobx-react\";\nimport {Button, Modal, PageHeader, Space} from \"antd\";\nimport {Link} from \"react-router-dom\";\nimport {PlusOutlined} from \"@ant-design/icons/lib\";\nimport {observable} from \"mobx\";\nimport {Resource} from \"@tpg-ui/rest\";\nimport {Controller} from \"./Controller\";\n\n@observer\nexport class List extends React.Component {\n    @observable selectedRowKey: string | undefined;\n    collection = collection<any>(Controller.NAME);\n\n    showDeletionDialog = (e: Resource<any>) => {\n        Modal.confirm({\n            title: `Are you sure you want to delete \"${e.title}\"?`,\n            okText: 'Delete',\n            cancelText: 'Cancel',\n            onOk: () => {\n                this.selectedRowKey = undefined;\n                return this.collection.delete(e);\n            }\n        });\n    };\n\n\n    render() {\n        return <PageHeader\n            ghost={false}\n            title=\"Publications\"\n            extra={[\n                <>\n                    <Link\n                        to={Controller.CREATE_PATH}\n                        key='create'>\n                        <Button type='primary' icon={<PlusOutlined/>}>Create</Button>\n                    </Link>\n                </>,\n                <>\n                    <Link\n                        to={Controller.PATH + '/' + this.selectedRowKey}\n                        key='edit'>\n                        <Button disabled={!this.selectedRowKey} type='default'>Edit</Button>\n                    </Link>\n                </>,\n                <>\n                    <Button\n                        disabled={!this.selectedRowKey}\n                        onClick={this.deleteSelectedRow}\n                        key='remove'\n                        type='default'>\n                        Remove\n                    </Button>\n                </>\n            ]}\n        >\n            <DataTable dataCollection={this.collection} columnDefinitions={['title',{columnProps:{title:'Author',dataIndex:['author','name']}}]}\n                          hideSelectionColumn={true}\n                          onRowSelectionChange={this.handleRowSelectionChange} />\n        </PageHeader>\n    }\n\n    getRecordById(id: string): Resource<any> {\n        const record: Resource<any> | undefined =\n            this.collection.items.find(record => record.id === id);\n\n        if (!record) {\n            throw new Error('Cannot find entity with id ' + id);\n        }\n\n        return record;\n    }\n\n    handleRowSelectionChange = (selectedRowKeys: React.Key[]) => {\n        this.selectedRowKey = selectedRowKeys[0] as string;\n    };\n\n    deleteSelectedRow = () => {\n        this.showDeletionDialog(this.getRecordById(this.selectedRowKey!));\n    };\n}","import * as React from \"react\";\nimport { RouteComponentProps } from \"react-router-dom\";\nimport {Card} from \"antd\";\nimport {Create} from \"./Create\";\nimport {Edit} from \"./Edit\";\nimport {List} from \"./List\";\n\ntype Props = RouteComponentProps<{resourceId?: string}>;\n\nexport class Controller extends React.Component<Props>{\n\n    static NAME = 'posts';\n    static PATH = '/posts';\n    static CREATE_SUBPATH = 'create';\n    static CREATE_PATH = Controller.PATH+'/'+Controller.CREATE_SUBPATH;\n    static ROUTE = Controller.PATH + '/:resourceId?';\n\n\n    render() {\n        const {resourceId} = this.props.match.params;\n        return (\n            <>\n\n                {resourceId\n                    ? (\n                        resourceId==Controller.CREATE_SUBPATH\n                            ?<Create/>\n                            :<Edit resourceId={resourceId}/>)\n                    : <List/>}\n            </>\n        )\n    }\n}","import * as React from \"react\";\nimport {ReactNode} from \"react\";\n\nexport default function Centered({children}: { children?: ReactNode }) {\n    return (\n        <div style={{width: '100vw', height: '100vh', display: 'flex', alignItems: 'center', justifyContent: 'center'}}>\n            {children}\n        </div>\n    )\n}","import * as React from 'react';\nimport './App.css';\nimport {observer} from \"mobx-react\";\nimport {injectAppStore, AppStoreInjected} from \"@tpg-ui/core\";\nimport {Switch, Route, Redirect, Link} from 'react-router-dom';\nimport {ConfigProvider, Layout, Menu, Spin} from \"antd\";\nimport {Controller as UsersController} from \"./components/user\";\nimport {Controller as PostsController} from \"./components/post\";\nimport { MailOutlined, UserOutlined, FormOutlined } from '@ant-design/icons';\nimport {Login} from \"@tpg-ui/ui\";\nimport Centered from \"./Centered\";\n\nconst {Header, Footer, Sider, Content} = Layout;\n\nconst App = injectAppStore(observer<React.FC<AppStoreInjected>>(({appStore}) => {\n    const {loginRequired,initialized} = appStore!;\n    function doLogout() {\n        appStore!.logout();\n    }\n    if(!initialized){\n        return <Centered>\n                <Spin spinning={true} />\n            </Centered>;\n    }\n    if(loginRequired) {\n        return <Centered>\n            <Login/>\n        </Centered>\n    }\n\n    return (\n\n        <div className=\"App\">\n            {/*<div>*/}\n            {/*    <div>Authenticated: {JSON.stringify(store.authenticated)}</div>*/}\n            {/*    <button onClick={()=>{store.login('asd','asd')}}>Login</button>*/}\n            {/*</div>*/}\n            <ConfigProvider componentSize={\"small\"}>\n                <Layout style={{minHeight:\"100vh\"}}>\n                    <Header>\n                        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['1']}>\n                            <Menu.Item key=\"1\" icon={<FormOutlined />}>\n                                <span>Publications management</span>\n                                <Link to={'/posts'}/>\n                            </Menu.Item>\n                            <Menu.Item key=\"2\" icon={<UserOutlined />}>\n                                Users management\n                                <Link to={'/users'}/>\n                            </Menu.Item>\n                            <Menu.Item key=\"3\" style={{float: 'right'}} onClick={()=>{doLogout()}}>Logout</Menu.Item>\n                        </Menu>\n                    </Header>\n                    <Content style={{ padding: '50px' }}>\n                        <div className=\"site-layout-content\">\n                        <Switch>\n                            <Route path={UsersController.ROUTE} component={UsersController}/>\n                            <Route path={PostsController.ROUTE} component={PostsController}/>\n                            <Redirect from=\"/\" to=\"/posts\" exact={true}/>\n                        </Switch>\n                        </div>\n                    </Content>\n                    <Footer>Test application created with @tpg-ui</Footer>\n                </Layout>\n\n            </ConfigProvider>\n        </div>\n    );\n}));\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and collection)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are created in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the created precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {createServer, Model as MirageModel, Factory as MirageFactory, Response, belongsTo, hasMany, Server  } from 'miragejs';\nimport {v4 as uuidv4} from \"uuid\"\nimport faker from \"faker\"\n\n\nexport function jsonServer() {\n\n    return createServer({\n        logging:true,\n        models:{\n            user: MirageModel.extend({\n                posts: hasMany(\"post\")\n            }),\n            post: MirageModel.extend({\n                author: belongsTo(\"user\"),\n                comments: hasMany(\"comment\"),\n            }),\n            comment: MirageModel\n        },\n        factories:{\n            post: MirageFactory.extend({\n                title: ()=>faker.lorem.sentence(6),\n                body: ()=>faker.lorem.paragraph(5)\n            })\n        },\n        namespace: 'api',\n        routes() {\n            this.get('/metadata', errorResponse);\n            this.post('/login',()=>({token:'test_token'}));\n\n\n            this.get('/users',processCollectionRequest('users'));\n            this.get('/users/:id/posts',(schema:any, request) => {\n                const {limit, offset, sort} = request.queryParams;\n                let data = schema.users.find(request.params.id).posts.models;\n                let processedCollection = processCollection(data,limit,offset,sort).map((e:any)=>{\n                    return serializeEntity(e);\n                });\n\n                return {\n                    data: processedCollection,\n                    count: data.length\n                };\n            });\n            this.get('/users/:id',(schema:any, request) => {\n                return schema.users.find(request.params.id).attrs;\n            });\n            this.put('/users/:id',(schema:any, request) => {\n                let user = JSON.parse(request.requestBody);\n                schema.users.find(request.params.id).update(user);\n                return {};\n            });\n\n            this.post('/users/',(schema:any, request) => {\n                let attrs = JSON.parse(request.requestBody);\n                schema.users.create({id:uuidv4().toString(),...attrs})\n                return {};\n            });\n            this.delete('/users/:id',(schema:any, request) => {\n                schema.users.find(request.params.id).destroy();\n                return {};\n            });\n\n            this.get('/posts',processCollectionRequest('posts',['author']));\n            this.get('/posts/:id',(schema:any, request) => {\n\n                const e = schema.posts.find(request.params.id);\n                if(request.queryParams.view=='with-author'){\n                    return serializeEntity(e,['author'])\n                }else{\n                    return {...e.attrs,author:e.authorId};\n                }\n            });\n            this.put('/posts/:id',(schema:any, request) => {\n                let {author, title, body}= JSON.parse(request.requestBody);\n                const e = schema.posts.find(request.params.id);\n                author = schema.users.find(author);\n                e.update({author, title, body });\n                return {};\n            });\n            this.post('/posts/',(schema:any, request) => {\n                let {author, title, body}= JSON.parse(request.requestBody);\n                author = schema.users.find(author);\n                schema.posts.create({id:uuidv4().toString(),author, title, body });\n                return {};\n            });\n\n            // this.put('/users/:id',(schema:any, request) => {\n            //     let user = JSON.parse(request.requestBody);\n            //     const status = schema.statuses.find(user.status);\n            //     if(!status){\n            //         return errorResponse();\n            //     }\n            //     user.status = status;\n            //     schema.users.find(request.params.id).update(user);\n            //     return {};\n            // });\n\n\n\n            // this.post('/user/',(schema:any, request) => {\n            //     let attrs = JSON.parse(request.requestBody);\n            //\n            //     const status = schema.statuses.find(attrs.status);\n            //     if(!status){\n            //         return errorResponse();\n            //     }\n            //     attrs.status = status;\n            //     schema.users.create({id:uuidv4().toString(),...attrs})\n            //     return {};\n            // });\n            //\n            // this.delete('/user/:id',(schema:any, request) => {\n            //     schema.users.find(request.params.id).destroy();\n            //     return {};\n            // });\n            //\n            // this.get('/user',function (schema:any, request) {\n            //     const {limit, offset, sort} = request.queryParams;\n            //\n            //     let data = schema.users.all().models;\n            //     return {\n            //         data: processCollection(data,limit,offset,sort),\n            //         count: data.length\n            //     };\n            // });\n\n            //this.delete(':catchall', this.pretender.passthrough);\n        },\n        seeds(server) {\n            const user1 = server.create(\"user\",{id:'01de915b-a7b3-41df-b941-60cdf3c019a2',name:faker.name.findName()});\n            const user2 = server.create(\"user\",{id:'345f607d-642a-4ccd-aa18-8f45bda9da95',name:faker.name.findName()});\n            server.createList(\"post\", 5,{author:user1});\n        },\n    })\n}\n\nfunction errorResponse() {\n    return new Response(400);\n}\nfunction serializeEntity(e:any, include?:string[]) {\n    const r = e.attrs;\n    if(include){\n        include.map((f)=>{\n            r[f] = e[f].attrs;\n        });\n    }\n    return r;\n}\nfunction processCollectionRequest(model:string, include?:string[]){\n    return (schema:any, request:any) => {\n        const {limit, offset, sort} = request.queryParams;\n        let data = schema[model].all().models;\n        let processedCollection = processCollection(data,limit,offset,sort).map((e:any)=>{\n            return serializeEntity(e,include);\n        });\n\n        return {\n            data: processedCollection,\n            count: data.length\n        };\n    };\n}\nfunction processCollection(data:Array<any>,limit?:string,offset?:string,sort?:string):Array<any>\n{\n    const l = limit?+limit:10;\n    const o = offset?+offset:0;\n    return sortItems(data,sort).slice(o,o+l);\n}\n\nfunction sortItems(items:Array<any>,sort?:string):Array<any>\n{\n    let isAscending: boolean = true;\n    let fieldName: string;\n    if(sort){\n        if (sort.startsWith('-')) {\n            isAscending = false;\n        }\n        fieldName = sort.slice(1);\n    }else {\n        return items;\n    }\n    const sortOrderModifier = isAscending ? 1 : -1;\n\n    return items.sort((a: any, b: any) => {\n        let valA = a[fieldName];\n        let valB = b[fieldName];\n\n        if (valA === valB) {\n            return 0;\n        }\n\n        if (valA == null && valB != null) {\n            // valA is null or undefined, but not valB -> valA is \"greater\" than valB\n            return 1 * sortOrderModifier;\n        }\n\n        if (valB == null) {\n            if (valA != null) {\n                // valB is null or undefined, but not valA -> valB is \"greater\" than valA\n                return -1 * sortOrderModifier;\n            }\n            // One is null and the other is undefined\n            return 0;\n        }\n\n        if (valA < valB) {\n            return -1 * sortOrderModifier;\n        } else if (valA > valB) {\n            return 1 * sortOrderModifier;\n        } else {\n            return 0;\n        }\n    });\n\n\n\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Application, MetaClassInfo} from \"@tpg-ui/rest\";\nimport {AppProvider} from \"@tpg-ui/core\";\nimport {jsonServer} from \"./server\";\nimport {HashRouter, Route} from \"react-router-dom\";\nimport * as metadata from './metadata.json';\n\nexport const rest = new Application('/api/', 'en', window.localStorage );\njsonServer();\nReactDOM.render(\n  <React.StrictMode>\n      <AppProvider rest={rest} metadata={(metadata.resources as Array<MetaClassInfo>)}>\n          <HashRouter>\n              <Route component={App}/>\n          </HashRouter>\n      </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {observable, action, IObservableArray, autorun, computed} from \"mobx\";\nimport {Application, Messages, MetaClassInfo} from \"@tpg-ui/rest\";\nimport {IReactComponent} from \"mobx-react/dist/types/IReactComponent\";\nimport {inject, IWrappedComponent} from \"mobx-react\";\n\nexport class AppStore {\n\n    static NAME = 'appStore';\n\n    /**\n     * Whether the user authenticated.\n     */\n    @observable authenticated = false;\n    @observable initialized = false;\n\n    @observable usingAnonymously = false;\n    @observable messages?: Messages;\n    /**\n     * Information about project entities.\n     */\n    @observable metadata: IObservableArray<MetaClassInfo>;\n\n    constructor(private rest: Application) {\n        autorun(() => {\n            if (this.initialized && (this.authenticated || this.usingAnonymously)) {\n                this.loadMetadata();\n            }\n        })\n    }\n\n    @action\n    login(login: string, password: string) {\n        return this.rest!.login(login, password).then(action(() => {\n            this.authenticated = true;\n        }));\n    }\n\n    @action\n    logout(): Promise<void> {\n        if (this.usingAnonymously) {\n            this.usingAnonymously = false;\n            return Promise.resolve();\n        }\n        if (this.rest.authToken != null) {\n            this.authenticated = false;\n            this.rest.logout();\n        }\n        return Promise.resolve();\n    }\n\n    /**\n     * Retrieves entity metadata using REST API.\n     */\n    @action\n    loadMetadata() {\n        this.rest.loadMetadata()\n             .then(action((metadata: MetaClassInfo[]) => {\n                     this.metadata = observable(metadata);\n             }));\n    }\n\n    initialize(): Promise<void> {\n        if (this.rest.authToken != null) {\n            this.authenticated = true;\n        }\n        this.initialized = true;\n        //TODO: Remove this line and add checks for anonymous access in prod\n        //this.usingAnonymously = true;\n\n        return Promise.resolve();\n    }\n\n    @computed get loginRequired(): boolean {\n        return !this.authenticated && !this.usingAnonymously;\n    }\n}\n\nexport class AppStoreWithMetadata extends AppStore{\n\n    constructor(rest: Application, private staticMetadata:Array<MetaClassInfo>) {\n        super(rest);\n    }\n\n\n    loadMetadata() {\n        this.metadata = observable(this.staticMetadata);\n    }\n}\n\nexport interface AppStoreInjected {\n    appStore?: AppStore;\n}\n\nexport function injectAppStore<T extends IReactComponent>(target: T): T & IWrappedComponent<T> {\n    return inject(AppStore.NAME)(target);\n}"],"sourceRoot":""}